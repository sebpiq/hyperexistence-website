{"version":3,"sources":["store/zoomedTile.ts","panZoom/utils/math.ts","panZoom/utils/events.ts","panZoom/internal-reducer/drag.ts","panZoom/internal-reducer/pinch.ts","panZoom/internal-reducer/transform-matrix.ts","panZoom/internal-reducer/index.ts","panZoom/internal-reducer/wheel.ts","panZoom/style.ts","constants.ts","maths.ts","selectors.ts","store/panZoom.ts","utils.ts","models.ts","theme.ts","hooks.ts","pre-build/static.ts","components/TilePagePortal.tsx","components/Loading.tsx","store/referenceViewer.ts","components/InlineReference.tsx","components/TilePage/ContentsNormal/ElementBlockQuote.tsx","components/TilePage/ContentsNormal/ElementSection.tsx","components/TilePage/ContentsNormal/ElementDiv.tsx","components/TilePage/ContentsNormal/ElementMain.tsx","components/TilePage/ContentsNormal/ElementObject.tsx","components/TilePage/ContentsNormal/ElementGeneric.tsx","components/TilePage/ContentsNormal/index.ts","components/TilePage/ContentsNormal/ContentsNormal.tsx","components/TilePage/ContentsChapter/ElementCitationLink.tsx","components/TilePage/ContentsChapter/ElementGeneric.tsx","components/TilePage/ContentsChapter/index.ts","components/TilePage/ContentsChapter/ContentsChapter.tsx","components/TilePage/Tags.tsx","components/TilePage/ErrorBoundary.tsx","components/ReferenceViewer/BibliographyEntryComponent.tsx","components/ReferenceViewer/ReferenceViewer.tsx","components/ReferenceViewer/index.ts","components/TilePage/ContentsGeneric.tsx","components/TilePage/TilePage.tsx","components/TilePage/index.ts","components/TileHexagon/ThumbnailImage.tsx","components/TileHexagon/ThumbnailVideo.tsx","store/clickedTile.ts","components/TileHexagon/shared.tsx","components/TileHexagon/TileHexagonNormal.tsx","components/TileHexagon/TileHexagonChapter.tsx","components/TileHexagon/HexagonContainer.tsx","components/TileHexagon/Overlay/GlitchyHexagons.tsx","components/TileHexagon/Overlay/SvgTextWrapped.tsx","components/TileHexagon/Overlay/GlitchyTitle.tsx","components/icons.tsx","components/TileHexagon/Overlay/ButtonContainer.tsx","components/TileHexagon/Overlay/ButtonsSoundOnOff.tsx","components/TileHexagon/Overlay/ButtonsReadMore.tsx","components/TileHexagon/Overlay/Buttons.tsx","components/TileHexagon/Overlay/StaticTitle.tsx","components/TileHexagon/Overlay/Overlay.tsx","components/TileHexagon/index.ts","components/TileHexagon/TileHexagon.tsx","components/TileHexagon/TileEmpty.tsx","components/TileHexagon/TileIntro.tsx","components/Hive/HiveTiles.tsx","components/TestMaths.tsx","components/Hive/HiveZoomer.tsx","panZoom/transforms.ts","components/Hive/Hive.tsx","panZoom/hooks.ts","store/windowDimensions.ts","components/App.tsx","store/sagas.ts","store/tiles.ts","store/svgTextSize.ts","store/mediaObjects.ts","store/bibliography.ts","store/index.ts","serviceWorker.ts","components/SvgTextSizeMeasurement.tsx","index.tsx"],"names":["ZoomStatus","convertViewportCoordsToUniverse","transformMatrix","viewportX","viewportY","inverseMatrix","inverse","applyToPoint","x","y","getScale","a","setScale","scale","d","getTranslate","e","f","setTranslate","getMousePosition","event","element","getBoundingClientRect","left","top","clientX","Math","round","clientY","getWheelPositionAndScale","scaleFactorOnWheel","sourceStart","targetStart","delta","max","min","deltaY","scaleFactor","getTouchPosition","touch","touches","length","changedTouches","isMultiTouch","getPinchPoints","x1","y1","x2","y2","sqrt","pow","dragStartAction","type","payload","dragAction","initialDragState","dragging","dragReducer","state","action","pinchStartAction","pinchPointDistance","pinchAction","initialPinchState","pinching","pinchReducer","initialTransformMatrixState","identity","initialState","drag","pinch","updatedState","wheelAction","display","touchAction","HEXAGON_FORMULA","calculatePointFromHexPoint","hexPoint","tileSize","hex_x","hex_y","calculateZoomTransform","width","height","translate","randNumber","random","randInt","floor","createDeepEqualSelector","createSelectorCreator","defaultMemoize","deepEqual","_isEven","value","_assertInt","Error","_hexToIndex","hex","selectScale","panZoom","internal","selectTransformMatrix","selectPanZoomIsInitialized","isInitialized","selectWindowDimensions","windowDimensions","memoizedSelectTransform","selectBibliographyEntry","bibliographyKey","bibliography","selectReferenceViewerBibliographyKeys","referenceViewer","slice","selectReferenceViewerBibliograhyEntries","map","filter","bibliographyEntry","selectReferenceViewerEntryIndex","index","indexOf","selectTileFromId","tileId","tiles","memoizedSelectIndexedTiles","createSelector","indexed","Object","values","forEach","tile","tileIndex","id","selectZoomedTileId","zoomedTile","selectZoomedTileStatus","status","selectFocusedTileId","clickedTile","focused","selectSoundTileId","sound","memoizedSelectViewport","transform","topLeft","bottomRight","memoizedSelectHexPointsInViewport","viewport","intersected","minHexX","ceil","calculateMinHexX","minHexY","calculateMinHexY","maxHexX","calculateMaxHexX","maxHexY","calculateMaxHexY","rowInd","colInd","push","hexPoints","memoizedSelectTileIdsInView","hexPointsIntersected","indexedTiles","tileIds","memoizedSelectTilesInView","console","error","memoizedSelectBackgroundHexPoints","memoizedSelectMostCentralTileInView","tilesInView","viewportCenter","minBy","position","b","memoizedSelectTilesInViewBoundingBox","points","xValues","point","yValues","calculateBoundingBox","xMin","yMin","selectSvgTextSize","svgTextSize","NONE","setTransform","translateX","translateY","initialValue","TileType","buildThumbnailVideoId","setHtmlVideoMuted","muted","videoId","videoElement","document","querySelector","makeRgbaColor","r","g","GLITCH_RED","GLITCH_BLUE","colors","tilePageBackground","tileHexagonBackground","tagsBackground","textLight","textDark","textLinkLight","textMainTitle","thumbBackground","scrollBackground","glitchRed","glitchBlue","glitchRedOpacity","glitchBlueOpacity","titleWhite","titleGrey","scrollbarMixin","theme","fontSizes","basePx","tileOverlay","buttons","containerHeight","paddingTop","hexagons","strokeWidth","displace","blurRadius","title","xPadding","titleAndIcons","spacing","space1","mixins","unselectable","polygonClipPath","xRatio","yRatio","join","scrollbar","zIndex","tileIntro","deviceScaledSettings","maxScale","minScale","initialScale","initialYOffsetRatio","zoomToPageScaleThreshold","zoomToPageScale","zoomToPageScaleBack","titleFontSizeRatio","useRequestZoomToTile","nextZoomedTileId","dispatch","useDispatch","useSelector","useDeviceScaledSettings","zoomedTileStatus","zoomedTileId","dependencies","effect","ZOOMING_IN","TILE_SIZE","timeoutId","setTimeout","PAGE_ZOOM_DURATION","clearTimeout","ZOOMING_OUT","useMemo","mapValues","coeffs","_computeSettingsInterpolations","_computerInterpolatedSettings","_","widthSmall","widthBig","p0","p1","valueSmall","valueBig","TileTypes","MediaObjectType","TileHtmlDiscriminants","TilePagePortal","children","ReactDOM","createPortal","getElementById","Container","styled","div","SpinnerAndText","LoadingText","Spinner","Loading","CONSTANTS","BIBLIOGRAPHY_KEY","BLOCKQUOTE_BIBLIOGRAPHY_KEY","NORMAL_TILE_CONTENT_CONTAINER_TAGS","NORMAL_TILE_CONTENT_END_TAGS","THUMBNAIL_FILENAME_TEMPLATE","THUMBNAIL_IMAGE_EXTENSION","THUMBNAIL_VIDEO_EXTENSIONS","Button","span","IndexNumber","InlineReference","props","referenceViewerIndex","onClick","addReferenceEntry","className","Quote","QuoteSpan","BottomCornerInlineReference","OpenQuoteChar","CloseQuoteChar","ElementBlockQuote","tileHtmlString","attributes","referenceElem","dangerouslySetInnerHTML","__html","html","TilePageSection","elems","tileHtmlElement","i","key","ElementDiv","MainStyled","main","ElementMain","child","MediaContainer","InlineReferenceCorner","ObjectElement","mediaObjectId","data","mediaObject","mediaObjects","selectMediaObjectFromId","inlineReferenceElem","mediaType","IMAGE","src","urls","alt","VIDEO","controls","autoPlay","ElementGenericContainer","ElementGenericEnd","ElementGeneric","discriminant","ELEMENT","includes","ContentsNormal","tileContent","ElementCitationLink","tileHtml","keys","childElements","childTileHtml","TagName","STRING","Fragment","ContentsChapter","chapterTileContent","TagContainer","ul","Tag","li","Tags","tagsElems","tags","tag","ErrorBoundary","hasError","info","ReactGA","exception","description","this","fatal","React","Component","Citation","CloseButton","button","BibliographyEntryComponent","citation","BibliographyEntryComponentContainer","ReferencerViewer","bibliographyEntries","bibliographyElems","borderMixin","PageContent","hasTags","Title","h1","TitleText","BackButton","StyledReferencerViewer","ContentsGeneric","onBackClicked","contentsElem","chapter","PageOuterContainer","hasBackground","PageInnerContainer","hasOpacity","LoadingContainer","TilePage","memo","zoomStatus","url","useState","response","setResponse","setError","isLoading","setIsLoading","useEffect","fetch","res","json","body","fetchData","useGetJson","tileContentUrl","_onBackClicked","preventDefault","isInnerContentReadyToRender","ZOOMED","innerContentInitialized","setInnerContentInitialized","outerContainerInitialized","setOuterContainerInitialized","innerContent","loadingElem","innerContentHasOpacity","outerContainerHasBackground","stopPropagation","ImageNoPointerEvents","img","ThumbnailImage","ThumbnailVideo","loop","playsInline","clickedTileEnd","clicked","dragged","HexagonClippedGroup","useTileClick","handlers","_onClickOrTouchStart","clickedTileStart","window","navigator","maxTouchPoints","msMaxTouchPoints","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","TileHexagonNormal","tileClickHandlers","isFocused","thumbnailComponent","thumbnailType","thumbnails","ClickArea","TileHexagonChapter","centeredPosition","inlineStyle","style","hexagonKeyframes","keyframes","Hexagon","path","HexagonRedShadow","HexagonBlueShadow","svgHexagonPath","containerDimensions","close","containerWidth","concat","makeSvgPath","Text","text","centerY","lineHeightRatio","charWidth","lineHeight","lines","tokenized","split","word","currentLine","currentLineLength","shift","words","splitTextInLines","finalLineHeight","tspans","line","dy","halfHeight","textY","textKeyframes","SvgTextWrapped","VolumeOffIcon","fill","stroke","VolumeOnIcon","ReadMoreIcon","IconGroup","ButtonGroup","ButtonContainer","xIcon","ICON_ORIGINAL_SIZE","yIcon","iconPositionStyle","buttonPositionStyle","SoundOnOffButton","passThroughProps","currentSoundTile","isSoundOn","volumeIcon","previousTileId","clickedTileSetSoundOn","MoreButton","zoomToTileEffect","buttonSlotWidth","buttonsElems","buttonType","ButtonsSoundOnOff","ButtonsReadMore","positionStyle","hexagonsStrokeWidth","hexagonsDisplace","Svg","svg","mode","titleHeight","titleXPadding","viewBoxOffset","viewBoxWidth","viewBoxHeight","viewBox","GlitchyTitle","StaticTitle","TileHexagon","overlayMode","isZoomed","isPlaying","hexagonContentElem","buttonsList","hasOverlay","isShowingButtons","ANIM_DURATION","ANIM_STEPS","AnimatedColor","range","colorKeyframes","stepsCount","steps","color","sample","percentage","makeColorKeyframes","css","alternativeClassName","HexagonContainer","baseStyle","STROKE_WIDTH","fontSizeRatio","VIEWBOX_W","VIEWBOX_H","backgroundHexPoints","introElem","tileElems","tileEmptyElems","TestMaths","POINT_RADIUS_PX","HiveZoomToPageContainer","animate","mostCentralTileId","shouldZoom","zoomToTileDependencies","toSVG","zoomToViewportPoint","universeX","universeY","matrix","fromObject","zoomToUniversePoint","isZoomedToPage","tilesBoundingBox","internalPanZoomState","panZoomRef","useRef","mouseAndTouchHandlers","reducer","onStateChange","setState","newState","isDeepEqual","windowMouseUp","internalReducer","undefined","addEventListener","disableBounce","ev","panZoomContainer","current","passive","removeEventListener","viewportPoint","initialPinchPointDistance","onMouseMove","onTouchMove","newPinchPointDistance","onWheel","usePanZoom","dragLimits","limits","endX","endY","start","end","deltaX","updatePanning","newScale","previousState","previousInternal","transformMatrixChanged","ref","panZoomStyle","getWindowDimensions","innerWidth","innerHeight","initialize","pageview","location","pathname","AppContainer","App","isPanZoomInitialized","dispatchRefreshWindowDimensions","shouldSetTransform","muteUnmuteVideoTask","muteUnmuteVideoSaga","rootSaga","takeEvery","all","rootReducer","combineReducers","uniq","without","sagaMiddleware","createSagaMiddleware","enhancers","applyMiddleware","preloadedState","preloadedTileData","t","baseTile","tileThumbnail","preloadedTileThumbnailData","thumbnailExtensions","thumbnailUrls","extension","thumbnailFileName","replace","preloadedTiles","mediaObjectState","preloadedMediaObjectData","m","serverUrl","preloadedServerData","server_id","media_type","filenames","filename","preloadedMediaObjects","entries","preloadedBibliographyData","preloadedBibliography","store","createStore","compose","run","Boolean","hostname","match","DIMENSIONS","TransparentText","textRef","tspanRef1","tspanRef2","measurementDone","setMeasurementDone","doMeasurements","textBbox","getBBox","tspan1Bbox","tspan2Bbox","setSize","GlobalStyle","createGlobalStyle","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1481970b.chunk.js","sourcesContent":["import { TileId } from '../models'\n\nexport const ZOOMED_TILE_ZOOMING_IN = 'ZOOMED_TILE_ZOOMING_IN'\nexport const ZOOMED_TILE_ZOOMING_OUT = 'ZOOMED_TILE_ZOOMING_OUT'\nexport const ZOOMED_TILE_UNSET_ZOOMED = 'ZOOMED_TILE_UNSET_ZOOMED'\nexport const ZOOMED_TILE_SET_ZOOMED = 'ZOOMED_TILE_SET_ZOOMED'\n\nexport enum ZoomStatus {\n    NONE,\n    ZOOMING_IN,\n    ZOOMED,\n    ZOOMING_OUT,\n}\n\ninterface ZoomingInTile {\n    type: typeof ZOOMED_TILE_ZOOMING_IN\n    payload: TileId\n}\n\ninterface UnsetZoomedTile {\n    type: typeof ZOOMED_TILE_UNSET_ZOOMED\n}\n\ninterface SetZoomed {\n    type: typeof ZOOMED_TILE_SET_ZOOMED\n}\n\ninterface ZoomingOutTile {\n    type: typeof ZOOMED_TILE_ZOOMING_OUT\n}\n\nexport type ZoomedTileActionTypes =\n    | ZoomingInTile\n    | UnsetZoomedTile\n    | ZoomingOutTile\n    | SetZoomed\n\nexport const zoomInTile = (tileId: TileId): ZoomedTileActionTypes => {\n    return {\n        type: ZOOMED_TILE_ZOOMING_IN,\n        payload: tileId,\n    }\n}\n\nexport const setZoomed = (): ZoomedTileActionTypes => {\n    return {\n        type: ZOOMED_TILE_SET_ZOOMED,\n    }\n}\n\nexport const zoomOutTile = (): ZoomedTileActionTypes => {\n    return {\n        type: ZOOMED_TILE_ZOOMING_OUT,\n    }\n}\n\nexport const unsetZoomed = (): ZoomedTileActionTypes => {\n    return {\n        type: ZOOMED_TILE_UNSET_ZOOMED,\n    }\n}\n\nexport type ZoomedTileState = {\n    tileId: TileId | null\n    status: ZoomStatus\n}\n\nconst initialState: ZoomedTileState = {\n    tileId: null,\n    status: ZoomStatus.NONE,\n}\n\nexport function zoomedTileReducer(\n    state = initialState,\n    action: ZoomedTileActionTypes\n): ZoomedTileState {\n    switch (action.type) {\n        case ZOOMED_TILE_ZOOMING_IN:\n            return {\n                tileId: action.payload,\n                status: ZoomStatus.ZOOMING_IN,\n            }\n        case ZOOMED_TILE_SET_ZOOMED:\n            return {\n                ...state,\n                status: ZoomStatus.ZOOMED,\n            }\n        case ZOOMED_TILE_ZOOMING_OUT:\n            return {\n                ...state,\n                status: ZoomStatus.ZOOMING_OUT,\n            }\n        case ZOOMED_TILE_UNSET_ZOOMED:\n            return {\n                tileId: null,\n                status: ZoomStatus.NONE,\n            }\n        default:\n            return state\n    }\n}\n","import { applyToPoint, inverse } from 'transformation-matrix'\nimport { TransformMatrix, ViewportCoordinate, UniversePoint } from '../types'\n\nexport const convertViewportCoordsToUniverse = (\n    transformMatrix: TransformMatrix,\n    viewportX: ViewportCoordinate,\n    viewportY: ViewportCoordinate\n) => {\n    const inverseMatrix = inverse(transformMatrix)\n    return applyToPoint(inverseMatrix, {\n        x: viewportX,\n        y: viewportY,\n    }) as UniversePoint\n}\n\nexport const getScale = (transformMatrix: TransformMatrix) => transformMatrix.a\n\nexport const setScale = (transformMatrix: TransformMatrix, scale: number) => ({\n    ...transformMatrix,\n    a: scale,\n    d: scale,\n})\n\nexport const getTranslate = (transformMatrix: TransformMatrix) => ({\n    x: transformMatrix.e,\n    y: transformMatrix.f,\n})\n\nexport const setTranslate = (\n    transformMatrix: TransformMatrix,\n    x: number,\n    y: number\n) => ({\n    ...transformMatrix,\n    e: x,\n    f: y,\n})\n\nexport const mapRange = (\n    value: number,\n    sourceStart: number,\n    sourceEnd: number,\n    targetStart: number,\n    targetEnd: number\n) => {\n    return (\n        targetStart +\n        ((targetEnd - targetStart) * (value - sourceStart)) /\n            (sourceEnd - sourceStart)\n    )\n}\n","import { mapRange } from './math'\nimport { ViewportPoint, ViewportCoordinate } from '../types'\n\nexport const getMousePosition = (\n    event: React.MouseEvent,\n    element: HTMLElement\n): ViewportPoint => {\n    const { left, top } = element.getBoundingClientRect()\n    const x = event.clientX - Math.round(left)\n    const y = event.clientY - Math.round(top)\n    return { x, y }\n}\n\nexport const getWheelPositionAndScale = (\n    scaleFactorOnWheel: number,\n    event: React.WheelEvent,\n    element: HTMLElement\n): [ViewportPoint, number] => {\n    const delta = Math.max(-1, Math.min(1, event.deltaY))\n    const scaleFactor = mapRange(\n        delta,\n        -1,\n        1,\n        scaleFactorOnWheel,\n        1 / scaleFactorOnWheel\n    )\n    return [getMousePosition(event, element), scaleFactor]\n}\n\nexport const getTouchPosition = (\n    event: React.TouchEvent,\n    element: HTMLElement\n): ViewportPoint => {\n    const touch =\n        event.touches.length > 0 ? event.touches[0] : event.changedTouches[0]\n    const { left, top } = element.getBoundingClientRect()\n    const x = touch.clientX - Math.round(left)\n    const y = touch.clientY - Math.round(top)\n    return { x, y }\n}\n\nexport const isMultiTouch = (event: React.TouchEvent): boolean => {\n    return event.touches.length > 1\n}\n\nexport const getPinchPoints = (\n    event: React.TouchEvent,\n    element: HTMLElement\n): [ViewportPoint, ViewportCoordinate] => {\n    const { left, top } = element.getBoundingClientRect()\n    const x1 = event.touches[0].clientX - Math.round(left)\n    const y1 = event.touches[0].clientY - Math.round(top)\n    const x2 = event.touches[1].clientX - Math.round(left)\n    const y2 = event.touches[1].clientY - Math.round(top)\n    const pinchPointDistance = Math.sqrt(\n        Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)\n    )\n    const viewportPoint = { x: (x1 + x2) / 2, y: (y1 + y2) / 2 }\n    return [viewportPoint, pinchPointDistance]\n}\n","import { ViewportPoint, ViewportCoordinate } from '../types'\n\nexport const DRAG_START = 'DRAG_START'\nexport const DRAG = 'DRAG'\nexport const DRAG_END = 'DRAG_END'\n\ninterface DragStartAction {\n    type: typeof DRAG_START\n    payload: ViewportPoint\n}\n\ninterface DragAction {\n    type: typeof DRAG\n    payload: ViewportPoint\n}\n\ninterface DragEndAction {\n    type: typeof DRAG_END\n    payload: undefined\n}\n\nexport type DragActionTypes = DragStartAction | DragAction | DragEndAction\n\nexport const dragStartAction = (\n    x: ViewportCoordinate,\n    y: ViewportCoordinate\n): DragActionTypes => {\n    return {\n        type: DRAG_START,\n        payload: { x, y },\n    }\n}\n\nexport const dragAction = (\n    x: ViewportCoordinate,\n    y: ViewportCoordinate\n): DragActionTypes => {\n    return {\n        type: DRAG,\n        payload: { x, y },\n    }\n}\n\nexport const dragEndAction = (): DragActionTypes => {\n    return {\n        type: DRAG_END,\n        payload: undefined,\n    }\n}\n\nexport interface DragState {\n    x: ViewportCoordinate | null\n    y: ViewportCoordinate | null\n    dragging: boolean\n}\n\nexport const initialDragState: DragState = {\n    x: null,\n    y: null,\n    dragging: false,\n}\n\nexport const dragReducer = (\n    state = initialDragState,\n    action: DragActionTypes\n) => {\n    switch (action.type) {\n        case DRAG_START:\n            return {\n                ...state,\n                dragging: true,\n                x: action.payload.x,\n                y: action.payload.y,\n            }\n        case DRAG:\n            return {\n                ...state,\n                x: action.payload.x,\n                y: action.payload.y,\n            }\n        default:\n            return {\n                ...state,\n                dragging: false,\n                x: null,\n                y: null,\n            }\n    }\n}\n","import { ViewportCoordinate } from '../types'\n\nexport const PINCH_START = 'PINCH_START'\nexport const PINCH = 'PINCH'\nexport const PINCH_END = 'PINCH_END'\n\ninterface PinchStartAction {\n    type: typeof PINCH_START\n    payload: ViewportCoordinate\n}\n\ninterface PinchAction {\n    type: typeof PINCH\n    payload: {\n        x: ViewportCoordinate\n        y: ViewportCoordinate\n        scaleFactor: number\n        pinchPointDistance: ViewportCoordinate\n    }\n}\n\ninterface PinchEndAction {\n    type: typeof PINCH_END\n    payload: undefined\n}\n\nexport type PinchActionTypes = PinchStartAction | PinchAction | PinchEndAction\n\nexport const pinchStartAction = (\n    pinchPointDistance: ViewportCoordinate\n): PinchActionTypes => {\n    return {\n        type: PINCH_START,\n        payload: pinchPointDistance,\n    }\n}\n\nexport const pinchAction = (\n    x: ViewportCoordinate,\n    y: ViewportCoordinate,\n    scaleFactor: number,\n    pinchPointDistance: ViewportCoordinate\n): PinchActionTypes => {\n    return {\n        type: PINCH,\n        payload: { x, y, scaleFactor, pinchPointDistance },\n    }\n}\n\nexport const pinchEndAction = (): PinchActionTypes => {\n    return {\n        type: PINCH_END,\n        payload: undefined,\n    }\n}\n\nexport interface PinchState {\n    pinchPointDistance: ViewportCoordinate | null\n    pinching: boolean\n}\n\nexport const initialPinchState: PinchState = {\n    pinchPointDistance: null,\n    pinching: false,\n}\n\nexport const pinchReducer = (\n    state = initialPinchState,\n    action: PinchActionTypes\n) => {\n    switch (action.type) {\n        case PINCH_START:\n            return {\n                ...state,\n                pinching: true,\n                pinchPointDistance: action.payload,\n            }\n        case PINCH:\n            return {\n                ...state,\n                pinchPointDistance: action.payload.pinchPointDistance,\n            }\n        case PINCH_END:\n            return {\n                ...state,\n                pinching: false,\n                pinchPointDistance: null,\n            }\n        default:\n            return state\n    }\n}\n","import { identity } from 'transformation-matrix'\nimport { TransformMatrix } from '../types'\n\nexport type TransformMatrixState = TransformMatrix\n\nexport const initialTransformMatrixState: TransformMatrixState = identity()\n","import {\n    DragState,\n    dragReducer,\n    DragActionTypes,\n    initialDragState,\n} from './drag'\nimport {\n    PinchState,\n    pinchReducer,\n    PinchActionTypes,\n    initialPinchState,\n} from './pinch'\nimport {\n    TransformMatrixState,\n    initialTransformMatrixState,\n} from './transform-matrix'\nimport { WheelActionTypes } from './wheel'\n\nexport type ActionTypes = DragActionTypes | PinchActionTypes | WheelActionTypes\n\nexport interface RootState {\n    drag: DragState\n    pinch: PinchState\n    transformMatrix: TransformMatrixState\n}\n\nexport const initialState: RootState = {\n    drag: initialDragState,\n    pinch: initialPinchState,\n    transformMatrix: initialTransformMatrixState,\n}\n\nexport default (state: RootState = initialState, action: ActionTypes) => {\n    const updatedState = {\n        ...state,\n        pinch: pinchReducer(state.pinch, action as PinchActionTypes),\n        drag: dragReducer(state.drag, action as DragActionTypes),\n    }\n    return updatedState\n}\n","import { ViewportCoordinate } from '../types'\n\nexport const WHEEL = 'WHEEL'\n\ninterface WheelAction {\n    type: typeof WHEEL\n    payload: {\n        x: ViewportCoordinate\n        y: ViewportCoordinate\n        scaleFactor: number\n    }\n}\n\nexport type WheelActionTypes = WheelAction\n\nexport const wheelAction = (\n    x: ViewportCoordinate,\n    y: ViewportCoordinate,\n    scaleFactor: number\n): WheelActionTypes => {\n    return {\n        type: WHEEL,\n        payload: { x, y, scaleFactor },\n    }\n}\n","export default { display: 'block', touchAction: 'none' } as React.CSSProperties\n","export const TILE_SIZE = 300\n\nexport const PAGE_ZOOM_DURATION = 1\n\nexport const TILE_PAGE_PORTAL_ID = 'tile-page'\nexport const TILES_CONTENT_ROOT_URL = `/tiles`\nexport const THUMBNAILS_ROOT_URL = `/thumbnails`\nexport const SITE_TITLE = 'HYPEREXISTENCE'\nexport const GOOGLE_ANALYTICS_ID = 'UA-17637518-6'\n\nexport const INTRO_TILE_ID = 'Introduction'\n\nexport const DEBUG = false\n\nexport const HEXAGON_FORMULA: Array<[number, number]> = [\n    [0.5, 0],\n    [1, 0.25],\n    [1, 0.75],\n    [0.5, 1],\n    [0, 0.75],\n    [0, 0.25],\n]\n","import { BoundingBox, Point, Transform } from './models'\nimport { HexPoint } from './pre-build/static'\n\nexport const calculateBoundingBox = (points: Array<Point>): BoundingBox => {\n    const xValues = points.map((point) => point.x)\n    const yValues = points.map((point) => point.y)\n    return {\n        topLeft: {\n            x: Math.min(...xValues),\n            y: Math.min(...yValues),\n        },\n        bottomRight: {\n            x: Math.max(...xValues),\n            y: Math.max(...yValues),\n        },\n    }\n}\n\nexport const calculateDistance = (a: Point, b: Point): number =>\n    Math.pow(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2), 0.5)\n\nexport const calculatePointFromHexPoint = (\n    hexPoint: HexPoint,\n    tileSize: number\n): Point => {\n    return {\n        x: (hexPoint.hex_x * tileSize) / 2,\n        y: (hexPoint.hex_y * tileSize * 3) / 4,\n    }\n}\n\n// Given x min, calculate the leftmost hex visible (even if it is cropped)\nexport const calculateMinHexX = (x: number, tileSize: number): number => {\n    return Math.ceil(x / (tileSize / 2) - 1)\n}\n\n// Given x max, calculate the rightmost hex visible (even if it is cropped)\nexport const calculateMaxHexX = (x: number, tileSize: number): number => {\n    return Math.floor(x / (tileSize / 2) + 1)\n}\n\n// etc ...\nexport const calculateMinHexY = (y: number, tileSize: number): number => {\n    return Math.ceil((y + (tileSize * 1) / 4) / ((tileSize * 3) / 4) - 1)\n}\n\nexport const calculateMaxHexY = (y: number, tileSize: number): number => {\n    return Math.floor((y - (tileSize * 1) / 4) / ((tileSize * 3) / 4) + 1)\n}\n\nexport const calculateZoomTransform = (\n    x: number,\n    y: number,\n    scale: number,\n    width: number,\n    height: number\n): Transform => {\n    const translateX = -x * scale + width / 2\n    const translateY = -y * scale + height / 2\n\n    return {\n        scale,\n        translate: {\n            x: translateX,\n            y: translateY,\n        },\n    }\n}\n\nexport const linearCoefficients = (p0: Point, p1: Point): [number, number] => {\n    // Ref: https://en.wikipedia.org/wiki/Linear_interpolation\n    // equation: y = y0 + (x - x0) * (y1 - y0) / (x1 - x0)\n    // =>        y = y0 - x0 * (y1 - y0) / (x1 - x0)\n    //                    + x * (y1 - y0) / (x1 - x0)\n    // =>\n    //      a = (y1 - y0) / (x1 - x0)\n    //      b = y0 - x0 * (y1 - y0) / (x1 - x0)\n    return [\n        (p1.y - p0.y) / (p1.x - p0.x),\n        p0.y - (p0.x * (p1.y - p0.y)) / (p1.x - p0.x),\n    ]\n}\n\nexport const randNumber = (min: number, max: number) => {\n    return min + Math.random() * max\n}\n\nexport const randInt = (min: number, max: number) => {\n    return Math.floor(randNumber(min, max))\n}\n","import { RootState } from './store'\nimport {\n    TileId,\n    FrontendTile,\n    Transform,\n    BoundingBox,\n    MediaObjectId,\n    BibliographyKey,\n} from './models'\nimport deepEqual from 'lodash.isequal'\nimport { createSelector, createSelectorCreator, defaultMemoize } from 'reselect'\nimport { TilesState } from './store/tiles'\nimport { HexPoint } from './pre-build/static'\nimport { TILE_SIZE } from './constants'\nimport minBy from 'lodash.minby'\nimport {\n    calculateBoundingBox,\n    calculateDistance,\n    calculateMaxHexX,\n    calculateMaxHexY,\n    calculateMinHexX,\n    calculateMinHexY,\n} from './maths'\nimport { getScale, getTranslate } from './panZoom/utils/math'\nimport { TransformMatrix } from './panZoom/types'\nimport { WindowDimensionState } from './store/windowDimensions'\n\nconst createDeepEqualSelector = createSelectorCreator(defaultMemoize, deepEqual)\n\ntype IndexedTiles = { [coordsStr: string]: TileId }\n\nconst _isEven = (value: number) => Math.round(value / 2) === value / 2\n\nconst _assertInt = (value: number) => {\n    if (Math.round(value) !== value) {\n        throw new Error('expected an int')\n    }\n}\n\nconst _hexToIndex = (hex: HexPoint) => {\n    _assertInt(hex.hex_x)\n    _assertInt(hex.hex_y)\n    return `${hex.hex_x},${hex.hex_y}`\n}\n\nexport const selectScale = (state: RootState) =>\n    getScale(state.panZoom.internal.transformMatrix)\n\nexport const selectTransformMatrix = (state: RootState) =>\n    state.panZoom.internal.transformMatrix\n\nexport const selectTransform = (transformMatrix: TransformMatrix) => {\n    return {\n        scale: getScale(transformMatrix),\n        translate: getTranslate(transformMatrix),\n    }\n}\n\nexport const selectPanZoomIsInitialized = (state: RootState) =>\n    state.panZoom.isInitialized\n\nexport const selectWindowDimensions = (state: RootState) =>\n    state.windowDimensions\n\nexport const memoizedSelectTransform = createDeepEqualSelector(\n    selectTransformMatrix,\n    selectTransform\n)\n\nexport const selectMediaObjectFromId = (\n    state: RootState,\n    mediaObjectId: MediaObjectId\n) => state.mediaObjects[mediaObjectId]\n\nexport const selectBibliographyEntry = (\n    state: RootState,\n    bibliographyKey: BibliographyKey\n) => state.bibliography[bibliographyKey]\n\nexport const selectReferenceViewerBibliographyKeys = (state: RootState) =>\n    state.referenceViewer.slice(0)\n\nexport const selectReferenceViewerBibliograhyEntries = (state: RootState) =>\n    selectReferenceViewerBibliographyKeys(state)\n        .map((bibliographyKey) =>\n            selectBibliographyEntry(state, bibliographyKey)\n        )\n        .filter((bibliographyEntry) => bibliographyEntry)\n\nexport const selectReferenceViewerEntryIndex = (\n    state: RootState,\n    bibliographyKey: BibliographyKey\n) => {\n    const index = selectReferenceViewerBibliographyKeys(state).indexOf(\n        bibliographyKey\n    )\n    return index === -1 ? null : index + 1\n}\n\nexport const selectTileFromId = (state: RootState, tileId: TileId) =>\n    state.tiles[tileId]\n\nexport const selectIndexedTiles = (tiles: TilesState) => {\n    const indexed: IndexedTiles = {}\n    Object.values(tiles).forEach((tile) => {\n        if (!tile) {\n            return\n        }\n        const tileIndex = _hexToIndex(tile.hex)\n        indexed[tileIndex] = tile.id\n    })\n    return indexed\n}\n\nconst memoizedSelectIndexedTiles = createSelector(\n    (state: RootState) => state.tiles,\n    selectIndexedTiles\n)\n\nexport const selectZoomedTileId = (state: RootState) => state.zoomedTile.tileId\n\nexport const selectZoomedTileStatus = (state: RootState) =>\n    state.zoomedTile.status\n\nexport const selectFocusedTileId = (state: RootState) =>\n    state.clickedTile.focused\n\nexport const selectSoundTileId = (state: RootState) => state.clickedTile.sound\n\n// Viewport in the coordinate system of the universe, taking into account scaling\nexport const selectViewport = (\n    transform: Transform,\n    windowDimensions: WindowDimensionState\n) => {\n    return {\n        topLeft: {\n            x: -transform.translate.x / transform.scale,\n            y: -transform.translate.y / transform.scale,\n        },\n        bottomRight: {\n            x:\n                (-transform.translate.x + windowDimensions.width) /\n                transform.scale,\n            y:\n                (-transform.translate.y + windowDimensions.height) /\n                transform.scale,\n        },\n    }\n}\n\nexport const memoizedSelectViewport = createSelector(\n    memoizedSelectTransform,\n    selectWindowDimensions,\n    selectViewport\n)\n\nexport const selectHexPointsInViewport = (\n    viewport: BoundingBox,\n    tileSize: number\n) => {\n    const intersected: Array<HexPoint> = []\n\n    const minHexX = calculateMinHexX(viewport.topLeft.x, tileSize)\n    const minHexY = calculateMinHexY(viewport.topLeft.y, tileSize)\n    const maxHexX = calculateMaxHexX(viewport.bottomRight.x, tileSize)\n    const maxHexY = calculateMaxHexY(viewport.bottomRight.y, tileSize)\n\n    for (let rowInd = minHexY; rowInd <= maxHexY; rowInd++) {\n        for (let colInd = minHexX; colInd <= maxHexX; colInd++) {\n            // Cause funily hex have either both odd coordinates OR both even coordinates.\n            if (\n                (_isEven(rowInd) && _isEven(colInd)) ||\n                (!_isEven(rowInd) && !_isEven(colInd))\n            ) {\n                intersected.push({ hex_x: colInd, hex_y: rowInd })\n            }\n        }\n    }\n\n    return intersected\n}\n\nexport const selectTileIdsInView = (\n    hexPointsIntersected: Array<HexPoint>,\n    indexedTiles: IndexedTiles\n) => {\n    return hexPointsIntersected\n        .map((hex) => indexedTiles[_hexToIndex(hex)])\n        .filter((tileId): tileId is TileId => !!tileId)\n}\n\nexport const isTileInView = (\n    hexPointsIntersected: Array<HexPoint>,\n    tile: FrontendTile\n) => {\n    return hexPointsIntersected.some(\n        (hexInView) =>\n            hexInView.hex_x === tile.hex.hex_x &&\n            hexInView.hex_y === tile.hex.hex_y\n    )\n}\n\nconst _memoizedSelectHexPointsInViewport = createSelector(\n    memoizedSelectViewport,\n    (state: RootState) => TILE_SIZE,\n    selectHexPointsInViewport\n)\n\n// When the viewport changes, list hex points is re-generated\n// We use this hackish selector to return the same instance, of hex points if list has the same contents\nconst memoizedSelectHexPointsInViewport = createDeepEqualSelector(\n    _memoizedSelectHexPointsInViewport,\n    (hexPoints) => hexPoints\n)\n\nconst _memoizedSelectTileIdsInView = createSelector(\n    memoizedSelectHexPointsInViewport,\n    memoizedSelectIndexedTiles,\n    selectTileIdsInView\n)\n\n// Sometimes, when the viewport changes, hex points are added / removed, but the list of tiles\n// in the viewport stays the same.\n// We use this hackish selector to memoize the list of tile ids in that case.\nconst memoizedSelectTileIdsInView = createDeepEqualSelector(\n    _memoizedSelectTileIdsInView,\n    (tileIds) => tileIds\n)\n\nexport const memoizedSelectTilesInView = createSelector(\n    (state: RootState) => state.tiles,\n    memoizedSelectTileIdsInView,\n    (tiles, tileIds) => {\n        return (\n            tileIds\n                .map((tileId) => {\n                    const tile = tiles[tileId]\n                    if (!tile) {\n                        console.error(`unknown tile id ${tileId}`)\n                    }\n                    return tile\n                })\n                // Remove not found tiles. Shouldn't happen, but that's for typescript\n                .filter((tile): tile is FrontendTile => !!tile)\n        )\n    }\n)\n\nexport const memoizedSelectBackgroundHexPoints = createSelector(\n    memoizedSelectHexPointsInViewport,\n    memoizedSelectIndexedTiles,\n    (hexPoints: Array<HexPoint>, indexedTiles: IndexedTiles) => {\n        return hexPoints.filter(\n            (hexPoint) => !indexedTiles[_hexToIndex(hexPoint)]\n        )\n    }\n)\n\nexport const selectMostCentralTileInView = (\n    viewport: BoundingBox,\n    tilesInView: Array<FrontendTile>,\n    tileSize: number\n): TileId | null => {\n    // This is not directly useful for the calculation but we leave it here\n    if (tilesInView.length === 0) {\n        return null\n    }\n    // subtract `tileSize / 2` because we need to offset to measure according to the center of the tile\n    const viewportCenter = {\n        x:\n            viewport.topLeft.x +\n            (viewport.bottomRight.x - viewport.topLeft.x) / 2 -\n            tileSize / 2,\n        y:\n            viewport.topLeft.y +\n            (viewport.bottomRight.y - viewport.topLeft.y) / 2 -\n            tileSize / 2,\n    }\n    const mostCentralTile = minBy(tilesInView, (tile) =>\n        calculateDistance(tile.position, viewportCenter)\n    )\n    return mostCentralTile!.id\n}\n\nexport const selectTilesInViewBoundingBox = (\n    tiles: Array<FrontendTile>,\n    tileSize: number\n): BoundingBox => {\n    const {\n        topLeft: { x: xMin, y: yMin },\n        bottomRight: { x: xMax, y: yMax },\n    } = calculateBoundingBox(tiles.map((tile) => tile.position))\n    return {\n        topLeft: { x: xMin - tileSize / 2, y: yMin - tileSize / 2 },\n        bottomRight: { x: xMax + tileSize / 2, y: yMax + tileSize / 2 },\n    }\n}\n\nexport const memoizedSelectMostCentralTileInView = createSelector(\n    memoizedSelectViewport,\n    memoizedSelectTilesInView,\n    () => TILE_SIZE,\n    selectMostCentralTileInView\n)\n\nexport const memoizedSelectTilesInViewBoundingBox = createSelector(\n    memoizedSelectTilesInView,\n    () => TILE_SIZE,\n    selectTilesInViewBoundingBox\n)\n\nexport const selectSvgTextSize = (state: RootState) => state.svgTextSize\n","import {\n    RootState as InternalPanZoomRootState,\n    initialState as initialValue,\n} from '../panZoom/internal-reducer'\nimport { setScale, setTranslate } from '../panZoom/utils/math'\nimport { Transform } from '../models'\nimport deepEqual from 'lodash.isequal'\n\nexport const PAN_ZOOM_SET_INTERNAL = 'PAN_ZOOM_SET_INTERNAL'\nexport const PAN_ZOOM_SET_TRANSFORM = 'PAN_ZOOM_SET_TRANSFORM'\n\ninterface SetPanZoomInternal {\n    type: typeof PAN_ZOOM_SET_INTERNAL\n    payload: {\n        internal: InternalPanZoomRootState\n        transformMatrixChanged: boolean\n    }\n}\n\ninterface SetTransform {\n    type: typeof PAN_ZOOM_SET_TRANSFORM\n    payload: Transform\n}\n\nexport type PanZoomStateTypes = SetPanZoomInternal | SetTransform\n\nexport const setPanZoomInternal = (\n    internal: InternalPanZoomRootState,\n    previousInternal: InternalPanZoomRootState\n): PanZoomStateTypes => {\n    const transformMatrixChanged = !deepEqual(\n        internal.transformMatrix,\n        previousInternal.transformMatrix\n    )\n    return {\n        type: PAN_ZOOM_SET_INTERNAL,\n        payload: { internal, transformMatrixChanged },\n    }\n}\n\nexport const setTransform = (\n    scale: number,\n    translateX: number,\n    translateY: number\n): PanZoomStateTypes => {\n    return {\n        type: PAN_ZOOM_SET_TRANSFORM,\n        payload: {\n            scale,\n            translate: {\n                x: translateX,\n                y: translateY,\n            },\n        },\n    }\n}\n\nexport type PanZoomState = {\n    internal: InternalPanZoomRootState\n    isInitialized: boolean\n}\n\nconst initialState = {\n    internal: initialValue,\n    isInitialized: false,\n}\n\nexport function panZoomReducer(\n    state = initialState,\n    action: PanZoomStateTypes\n): PanZoomState {\n    switch (action.type) {\n        case PAN_ZOOM_SET_INTERNAL:\n            return {\n                ...state,\n                internal: action.payload.internal,\n            }\n        case PAN_ZOOM_SET_TRANSFORM:\n            return {\n                ...state,\n                isInitialized: true,\n                internal: {\n                    ...state.internal,\n                    transformMatrix: setTranslate(\n                        setScale(\n                            state.internal.transformMatrix,\n                            action.payload.scale\n                        ),\n                        action.payload.translate.x,\n                        action.payload.translate.y\n                    ),\n                },\n            }\n        default:\n            return state\n    }\n}\n","import { TileId } from './models'\n\nexport const splitTextInLines = (\n    text: string,\n    charWidth: number,\n    containerWidth: number\n) => {\n    const tokenized = text.split(' ').filter((word) => word.length)\n    const lines: Array<Array<string>> = []\n    let currentLine: Array<string> = []\n    let currentLineLength = 0\n    while (tokenized.length) {\n        const word = tokenized.shift()!\n\n        // If the word is too long to fit in current line\n        if (currentLineLength + charWidth * word.length > containerWidth) {\n            // If there are already word in current line, create a new line\n            if (currentLine.length) {\n                lines.push(currentLine)\n                currentLine = [word]\n                // +1 for space\n                currentLineLength = (word.length + 1) * charWidth\n\n                // If there aren't already words, create a line with only that word even if too long\n            } else {\n                lines.push([word])\n            }\n        } else {\n            currentLine.push(word)\n            currentLineLength += (word.length + 1) * charWidth\n        }\n    }\n    if (currentLine.length) {\n        lines.push(currentLine)\n    }\n    return lines.map((words) => words.join(' '))\n}\n\nexport const buildThumbnailVideoId = (tileId: TileId) =>\n    `thumbnail-video-${tileId}`\n\nexport const setHtmlVideoMuted = (tileId: TileId, muted: boolean) => {\n    const videoId = buildThumbnailVideoId(tileId)\n    const videoElement = document.querySelector(\n        `#${videoId}`\n    ) as HTMLVideoElement\n    if (!videoElement) {\n        console.error(`video not found ${videoId}`)\n        return\n    }\n    videoElement.muted = muted\n}\n\n// REF : https://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript\nexport const isTouchDevice = () => {\n    return (\n        'ontouchstart' in window ||\n        navigator.maxTouchPoints > 0 ||\n        (navigator as any).msMaxTouchPoints > 0\n    )\n}\n\n// Make SVG path `d`.\n// `points` coordinates  are given in ratios of the container size.\nexport const makeSvgPath = (\n    points: Array<[number, number]>,\n    containerDimensions: [number, number],\n    close: boolean = true\n) => {\n    const [containerWidth, containerHeight] = containerDimensions\n    if (close) {\n        points = points.concat([points[0]])\n    }\n    return points\n        .map(([xRatio, yRatio], i) => {\n            const x = xRatio * containerWidth\n            const y = yRatio * containerHeight\n            if (i === 0) {\n                return `M ${x} ${y}`\n            } else {\n                return `L ${x} ${y}`\n            }\n        })\n        .join(' ')\n}\n\nexport const makeRgbaColor = ([r, g, b]: [number, number, number], a: number) =>\n    `rgba(${r}, ${g}, ${b}, ${a})`\n","import {\n    FrontendTile as BaseFrontendTile,\n    HexPoint,\n    MediaObjectType,\n} from './pre-build/static'\nimport { TILES_CONTENT_ROOT_URL } from './constants'\n\nexport type TileId = string\nexport type MediaObjectId = string\nexport type BibliographyKey = string\n\nexport enum TileType {\n    chapter,\n    tile,\n}\n\nexport interface Transform {\n    scale: number\n    translate: {\n        x: number\n        y: number\n    }\n}\n\nexport interface BoundingBox {\n    topLeft: Point\n    bottomRight: Point\n}\n\nexport interface HexBoundingBox {\n    topLeft: HexPoint\n    bottomRight: HexPoint\n}\n\nexport interface Point {\n    x: number\n    y: number\n}\n\nexport interface FrontendTile extends Omit<BaseFrontendTile, 'type'> {\n    type: TileType\n    position: Point\n    thumbnails: Array<string>\n    thumbnailType: MediaObjectType\n}\n\nexport interface FrontendMediaObject {\n    id: MediaObjectId\n    mediaType: MediaObjectType\n    urls: Array<string>\n}\n\nexport const tileContentUrl = (tileId: TileId) => {\n    return `${TILES_CONTENT_ROOT_URL}/${tileId}.json`\n}\n\nexport interface BibliographyEntry {\n    id: BibliographyKey\n    citation: string\n}\n\ntype SettingRange = [number, number]\n\nexport interface DeviceScaledSettings {\n    // Used to compute the scaling of other values.\n    // left is for small screen, right for big screen\n    width: SettingRange\n\n    maxScale: SettingRange\n    minScale: SettingRange\n    initialScale: SettingRange\n\n    // The ratio in height of the page where to position the intro tile\n    // on page load. 0.5 means tile will be centered vertically\n    initialYOffsetRatio: SettingRange\n\n    zoomToPageScaleThreshold: SettingRange\n    zoomToPageScale: SettingRange\n    zoomToPageScaleBack: SettingRange\n\n    // The multiplier for the font size of the title\n    titleFontSizeRatio: SettingRange\n}\n","import { HEXAGON_FORMULA } from './constants'\nimport { DeviceScaledSettings } from './models'\nimport { makeRgbaColor } from './utils'\n\nconst GLITCH_RED: [number, number, number] = [255, 0, 0]\nconst GLITCH_BLUE: [number, number, number] = [0, 0, 255]\n\nconst colors = {\n    tilePageBackground: 'rgba(0, 79, 79, 0.7)',\n    tileHexagonBackground: 'black',\n    tagsBackground: 'rgba(255, 255, 255, 0.3)',\n    textLight: 'white',\n    textDark: 'black',\n    textLinkLight: 'rgba(0, 216, 216, 1)',\n    textMainTitle: '#ddd',\n    thumbBackground: 'rgba(255, 255, 255, 0.5)',\n    scrollBackground: 'transparent',\n    glitchRed: makeRgbaColor(GLITCH_RED, 1),\n    glitchBlue: makeRgbaColor(GLITCH_BLUE, 1),\n    glitchRedOpacity: makeRgbaColor(GLITCH_RED, 0.2),\n    glitchBlueOpacity: makeRgbaColor(GLITCH_BLUE, 0.4),\n    titleWhite: 'white',\n    titleGrey: '#111',\n}\n\nconst tileOverlay = {\n    buttons: {\n        containerHeight: 1 / 3,\n        paddingTop: 15,\n    },\n    hexagons: {\n        strokeWidth: 3,\n        // Amount of pixels the hexagons move in glitch animation\n        displace: 1,\n        blurRadius: 1,\n    },\n    title: {\n        xPadding: 5,\n    },\n    titleAndIcons: {\n        strokeWidth: 2,\n    },\n}\n\nconst scrollbarMixin = `\n    * {\n        scrollbar-width: thin;\n        scrollbar-color: ${colors.thumbBackground} ${colors.scrollBackground};\n    }\n\n    * ::-webkit-scrollbar {\n        width: 11px;\n    }\n    * ::-webkit-scrollbar-track {\n        background: ${colors.scrollBackground};\n    }\n    * ::-webkit-scrollbar-thumb {\n        background-color: ${colors.thumbBackground} ;\n        border-radius: 6px;\n        border: 3px solid ${colors.scrollBackground};\n    }\n`\n\nconst theme = {\n    fontSizes: {\n        basePx: 20,\n    },\n    colors,\n    tileOverlay,\n    // units in rem\n    spacing: {\n        space1: 1,\n    },\n    mixins: {\n        unselectable: `\n            user-select: none;\n        `,\n        polygonClipPath: `clip-path: polygon(${HEXAGON_FORMULA.map(\n            ([xRatio, yRatio]) => `${xRatio * 100}% ${yRatio * 100}%`\n        ).join(', ')});`,\n        scrollbar: scrollbarMixin,\n    },\n    zIndex: {\n        tileIntro: 8,\n    },\n    // For docs of values look at the interface definition\n    deviceScaledSettings: {\n        width: [375, 1800],\n        // left value corresponds to small width, right value to large width\n        maxScale: [5, 5],\n        minScale: [0.8, 1.4],\n        initialScale: [0.8, 1.4],\n        initialYOffsetRatio: [0.06, 0.11],\n        zoomToPageScaleThreshold: [10, 10],\n        zoomToPageScale: [50, 50],\n        zoomToPageScaleBack: [1.05, 2],\n        titleFontSizeRatio: [1.65, 3],\n    } as DeviceScaledSettings,\n}\n\nexport default theme as Readonly<typeof theme>\n","import { useState, useEffect, EffectCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport mapValues from 'lodash.mapvalues'\nimport {\n    zoomInTile,\n    ZoomStatus,\n    unsetZoomed,\n    setZoomed,\n} from './store/zoomedTile'\nimport { TILE_SIZE, PAGE_ZOOM_DURATION } from './constants'\nimport { calculateZoomTransform, linearCoefficients } from './maths'\nimport { setTransform } from './store/panZoom'\nimport {\n    selectZoomedTileId,\n    selectTileFromId,\n    selectZoomedTileStatus,\n    selectWindowDimensions,\n} from './selectors'\nimport { RootState } from './store'\nimport { TileId, DeviceScaledSettings } from './models'\nimport theme from './theme'\nimport { createSelector } from 'reselect'\n\n// Ref : https://www.digitalocean.com/community/tutorials/creating-a-custom-usefetch-react-hook\nexport const useGetJson = function <JsonStructure>(url: string) {\n    const [response, setResponse] = useState<JsonStructure | null>(null)\n    const [error, setError] = useState<Error | null>(null)\n    const [isLoading, setIsLoading] = useState<boolean>(false)\n    useEffect(() => {\n        const fetchData = async () => {\n            setIsLoading(true)\n            try {\n                const res = await fetch(url)\n                const body = await res.json()\n                setResponse(body)\n                setIsLoading(false)\n            } catch (error) {\n                setError(error)\n            }\n        }\n        fetchData()\n    }, [url])\n    return { response, error, isLoading }\n}\n\n// Implements the lifecycle / side-effects for tile zooming-in.\n// It is being called explicitely when a component wants to zoom-in to a new tile,\n// and it then handles the timings and other quirks for the animations.\n// It returns an effect function to be called, so that the lifecycle can also be initiated\n// on user interaction.\nexport const useRequestZoomToTile = (\n    nextZoomedTileId: TileId | null\n): [EffectCallback, Array<number | null | string>] => {\n    const dispatch = useDispatch()\n    const { width, height } = useSelector(selectWindowDimensions)\n    const { zoomToPageScaleBack, zoomToPageScale } = useDeviceScaledSettings()\n    const zoomedTileStatus = useSelector(selectZoomedTileStatus)\n    const zoomedTileId = useSelector(selectZoomedTileId)\n    const zoomedTile = useSelector((state: RootState) => {\n        if (zoomedTileId) {\n            return selectTileFromId(state, zoomedTileId)\n        } else {\n            return null\n        }\n    })\n\n    const dependencies = [\n        zoomedTileStatus,\n        nextZoomedTileId,\n        zoomedTileId,\n        width,\n        height,\n    ]\n\n    const effect = () => {\n        // NONE -> ZOOMING_IN\n        if (nextZoomedTileId !== null && zoomedTileStatus === ZoomStatus.NONE) {\n            dispatch(zoomInTile(nextZoomedTileId!))\n\n            // ZOOMING_IN -> ZOOMED\n        } else if (zoomedTileStatus === ZoomStatus.ZOOMING_IN) {\n            const {\n                scale,\n                translate: { x, y },\n            } = calculateZoomTransform(\n                zoomedTile!.position.x + TILE_SIZE / 2,\n                zoomedTile!.position.y + TILE_SIZE / 2,\n                zoomToPageScale,\n                width,\n                height\n            )\n            dispatch(setTransform(scale, x, y))\n            // We start a timeout to let the zoom animation time to finish\n            const timeoutId = setTimeout(\n                () => dispatch(setZoomed()),\n                PAGE_ZOOM_DURATION * 1000 + 50\n            )\n            return () => {\n                clearTimeout(timeoutId)\n            }\n\n            // ZOOMING_OUT -> NONE\n        } else if (zoomedTileStatus === ZoomStatus.ZOOMING_OUT) {\n            const {\n                scale,\n                translate: { x, y },\n            } = calculateZoomTransform(\n                zoomedTile!.position.x + TILE_SIZE / 2,\n                zoomedTile!.position.y + TILE_SIZE / 2,\n                zoomToPageScaleBack,\n                width,\n                height\n            )\n            dispatch(setTransform(scale, x, y))\n            // We start a timeout to let the unzoom animation time to finish\n            const timeoutId = setTimeout(\n                () => dispatch(unsetZoomed()),\n                PAGE_ZOOM_DURATION * 1000 + 50\n            )\n            return () => {\n                clearTimeout(timeoutId)\n            }\n        }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return useMemo(() => [effect, dependencies], dependencies)\n}\n\nexport const useDeviceScaledSettings = () => {\n    const { width } = useSelector(selectWindowDimensions)\n    // If the width is zero we return default values to avoid\n    // confusing the memoized reselect function\n    if (width === 0) {\n        return mapValues(\n            theme.deviceScaledSettings,\n            ([_, valueBig]) => valueBig\n        )\n    }\n    const coeffs = _computeSettingsInterpolations(1)\n    return _computerInterpolatedSettings(width, coeffs)\n}\n\nconst _computerInterpolatedSettings = createSelector(\n    (width: number, _: InterpolationCoefficients) => width,\n    (_, coeffs) => coeffs,\n    (width, coeffs) => {\n        return mapValues(coeffs, ([a, b]) => a * width + b)\n    }\n)\n\nconst _computeSettingsInterpolations = createSelector(\n    // Dummy, to make reselect typings happy\n    () => 1,\n    () => {\n        const [widthSmall, widthBig] = theme.deviceScaledSettings.width\n        return mapValues(\n            theme.deviceScaledSettings,\n            ([valueSmall, valueBig]) => {\n                return linearCoefficients(\n                    {\n                        x: widthSmall,\n                        y: valueSmall,\n                    },\n                    {\n                        x: widthBig,\n                        y: valueBig,\n                    }\n                )\n            }\n        )\n    }\n)\n\ntype DeviceScaledSettingsKey = keyof DeviceScaledSettings\ntype InterpolationCoefficients = {\n    [k in DeviceScaledSettingsKey]: [number, number]\n}\n","export enum TileTypes {\n    CHAPTER = 'c',\n    TILE = 't',\n}\n\nexport enum MediaObjectType {\n    IMAGE = 'image',\n    VIDEO = 'video',\n}\n\nexport interface HexPoint {\n    hex_x: number\n    hex_y: number\n}\n\nexport interface FrontendTile {\n    id: string\n    title: string\n    type: TileTypes\n    hex: HexPoint\n    tags: Array<string>\n}\n\nexport interface FrontendMediaObject {\n    id: string\n    media_type: MediaObjectType\n    filenames: Array<string>\n    server_id: number\n}\n\nexport interface TileHtmlElement {\n    type: string\n    attributes: { [key: string]: string }\n    children: Array<TileHtmlElement | TileHtmlString>\n    discriminant: TileHtmlDiscriminants.ELEMENT\n}\n\nexport interface TileHtmlString {\n    html: string\n    discriminant: TileHtmlDiscriminants.STRING\n}\n\nexport enum TileHtmlDiscriminants {\n    STRING = 'string',\n    ELEMENT = 'element',\n}\n\nexport interface FrontendTileContent {\n    id: number\n    children: Array<TileHtmlElement | TileHtmlString>\n    title: string\n    tags: Array<string>\n}\n\nexport interface FrontendChapterTileContent {\n    id: string\n    children: Array<TileHtmlElement | TileHtmlString>\n    title: string\n}\n\nexport interface FrontendBibliographyEntry {\n    f: string\n}\n\nexport const CONSTANTS = {\n    BIBLIOGRAPHY_KEY: 'bibliography_key',\n    BLOCKQUOTE_BIBLIOGRAPHY_KEY: 'cite',\n    NORMAL_TILE_CONTENT_CONTAINER_TAGS: ['section', 'main'],\n    NORMAL_TILE_CONTENT_END_TAGS: ['blockquote', 'div', 'object'],\n    THUMBNAIL_FILENAME_TEMPLATE: 'TILE_ID.EXTENSION',\n    THUMBNAIL_IMAGE_EXTENSION: 'jpg',\n    THUMBNAIL_VIDEO_EXTENSIONS: ['mp4'],\n}\n","import { FunctionComponent } from 'react'\nimport { TILE_PAGE_PORTAL_ID } from '../constants'\nimport ReactDOM from 'react-dom'\n\nconst TilePagePortal: FunctionComponent = ({ children }) => {\n    return ReactDOM.createPortal(\n        children,\n        document.getElementById(TILE_PAGE_PORTAL_ID)!\n    )\n}\n\nexport default TilePagePortal\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport theme from '../theme'\n\n// Spinner from https://tobiasahlin.com/spinkit/\n\nconst spinnerSize = '5rem'\n\nconst Container = styled.div`\n    display: flex;\n    height: 100%;\n    width: 100%;\n    justify-content: space-around;\n    opacity: 0.6;\n`\n\nconst SpinnerAndText = styled.div`\n    align-self: center;\n`\n\nconst LoadingText = styled.div`\n    text-align: center;\n`\n\nconst Spinner = styled.div`\n    width: ${spinnerSize};\n    height: ${spinnerSize};\n    ${theme.mixins.polygonClipPath}\n\n    background-color: ${theme.colors.textLight};\n    \n    -webkit-animation: sk-rotateplane 1.2s infinite ease-in-out;\n    animation: sk-rotateplane 1.2s infinite ease-in-out;\n      \n    @-webkit-keyframes sk-rotateplane {\n        0% { -webkit-transform: perspective(120px) }\n        50% { -webkit-transform: perspective(120px) rotateY(180deg) }\n        100% { -webkit-transform: perspective(120px) rotateY(180deg)  rotateX(180deg) }\n    }\n      \n    @keyframes sk-rotateplane {\n        0% { \n            transform: perspective(120px) rotateX(0deg) rotateY(0deg);\n            -webkit-transform: perspective(120px) rotateX(0deg) rotateY(0deg) \n        } 50% { \n            transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);\n            -webkit-transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg) \n        } 100% { \n            transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\n            -webkit-transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\n        }\n    }\n\n`\n\nconst Loading = () => {\n    return (\n        <Container>\n            <SpinnerAndText>\n                <Spinner></Spinner>\n                <LoadingText>Loading...</LoadingText>\n            </SpinnerAndText>\n        </Container>\n    )\n}\n\nexport default Loading\n","import uniq from 'lodash.uniq'\nimport without from 'lodash.without'\nimport { BibliographyKey } from '../models'\nimport { ZOOMED_TILE_UNSET_ZOOMED, ZoomedTileActionTypes } from './zoomedTile'\n\nexport const REFERENCE_VIEWER_ADD_ENTRY = 'REFERENCE_VIEWER_ADD_ENTRY'\nexport const REFERENCE_VIEWER_REMOVE_ENTRY = 'REFERENCE_VIEWER_REMOVE_ENTRY'\n\ninterface AddEntry {\n    type: typeof REFERENCE_VIEWER_ADD_ENTRY\n    payload: {\n        bibliographyKey: BibliographyKey\n    }\n}\n\ninterface RemoveEntry {\n    type: typeof REFERENCE_VIEWER_REMOVE_ENTRY\n    payload: {\n        bibliographyKey: BibliographyKey\n    }\n}\n\nexport type ReferenceViewerActionTypes = AddEntry | RemoveEntry\n\nexport const addReferenceEntry = (\n    bibliographyKey: BibliographyKey\n): ReferenceViewerActionTypes => {\n    return {\n        type: REFERENCE_VIEWER_ADD_ENTRY,\n        payload: { bibliographyKey },\n    }\n}\n\nexport const removeReferenceEntry = (\n    bibliographyKey: BibliographyKey\n): ReferenceViewerActionTypes => {\n    return {\n        type: REFERENCE_VIEWER_REMOVE_ENTRY,\n        payload: { bibliographyKey },\n    }\n}\n\nexport type ReferenceViewerState = Array<BibliographyKey>\n\nconst initialState: ReferenceViewerState = []\n\nexport function referenceViewerReducer(\n    state = initialState,\n    action: ReferenceViewerActionTypes | ZoomedTileActionTypes\n): ReferenceViewerState {\n    // We want to avoid clicks on drag actions, so we\n    // memorize the start of a click, and cancel the click\n    // if the user dragged before we receive click end.\n    switch (action.type) {\n        case REFERENCE_VIEWER_ADD_ENTRY:\n            return uniq([...state, action.payload.bibliographyKey])\n        case REFERENCE_VIEWER_REMOVE_ENTRY:\n            return without(state, action.payload.bibliographyKey)\n        case ZOOMED_TILE_UNSET_ZOOMED:\n            return initialState\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { BibliographyKey } from '../models'\nimport theme from '../theme'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addReferenceEntry } from '../store/referenceViewer'\nimport { RootState } from '../store'\nimport { selectReferenceViewerEntryIndex } from '../selectors'\n\ninterface OwnProps {\n    bibliographyKey: BibliographyKey\n}\n\ntype Props = OwnProps & React.HTMLAttributes<HTMLSpanElement>\n\nconst Button = styled.span`\n    cursor: pointer;\n    padding: 0 0.2em;\n    background-color: ${theme.colors.tilePageBackground};\n`\n\nconst IndexNumber = styled.span`\n    text-decoration: underline;\n`\n\nconst InlineReference = ({ bibliographyKey, ...props }: Props) => {\n    const dispatch = useDispatch()\n    const referenceViewerIndex = useSelector((state: RootState) =>\n        selectReferenceViewerEntryIndex(state, bibliographyKey)\n    )\n    const onOpen = () => dispatch(addReferenceEntry(bibliographyKey))\n\n    const element =\n        referenceViewerIndex === null ? (\n            <Button onClick={onOpen} className={props.className}>\n                *\n            </Button>\n        ) : (\n            <IndexNumber className={props.className}>\n                {referenceViewerIndex}\n            </IndexNumber>\n        )\n\n    return element\n}\n\nexport default InlineReference\n","import React from 'react'\nimport {\n    TileHtmlString,\n    TileHtmlElement,\n    CONSTANTS,\n} from '../../../pre-build/static'\nimport styled from 'styled-components/macro'\nimport InlineReference from '../../InlineReference'\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: row;\n`\n\nconst Quote = styled.div`\n    flex: 1;\n    position: relative;\n`\n\nconst QuoteSpan = styled.span`\n    position: relative;\n`\n\nconst BottomCornerInlineReference = styled(InlineReference)`\n    position: absolute;\n    bottom: 0;\n    right: 0;\n`\n\nconst OpenQuoteChar = styled.div`\n    align-self: flex-start;\n    font-size: 400%;\n    ${QuoteSpan} {\n        bottom: 0.2em;\n    }\n`\n\nconst CloseQuoteChar = styled(OpenQuoteChar)`\n    align-self: flex-end;\n    ${QuoteSpan} {\n        top: 0.2em;\n    }\n`\n\ninterface Props {\n    tileHtmlString: TileHtmlString\n    attributes: TileHtmlElement['attributes']\n}\n\nconst ElementBlockQuote = ({ tileHtmlString, attributes }: Props) => {\n    const bibliographyKey = attributes[CONSTANTS.BLOCKQUOTE_BIBLIOGRAPHY_KEY]\n    let referenceElem: JSX.Element | null = null\n    if (bibliographyKey) {\n        referenceElem = (\n            <BottomCornerInlineReference bibliographyKey={bibliographyKey} />\n        )\n    }\n    return (\n        <Container>\n            <OpenQuoteChar>\n                <QuoteSpan>“</QuoteSpan>\n            </OpenQuoteChar>\n            <Quote>\n                <blockquote\n                    dangerouslySetInnerHTML={{ __html: tileHtmlString.html }}\n                ></blockquote>\n                {referenceElem}\n            </Quote>\n            <CloseQuoteChar>\n                <QuoteSpan>„</QuoteSpan>\n            </CloseQuoteChar>\n        </Container>\n    )\n}\n\nexport default ElementBlockQuote\n","import React from 'react'\nimport { TileHtmlElement } from '../../../pre-build/static'\nimport ElementGeneric from './ElementGeneric'\n\ninterface Props {\n    tileHtmlElement: TileHtmlElement\n}\n\nconst TilePageSection = ({ tileHtmlElement }: Props) => {\n    const elems = tileHtmlElement.children!.map((tileHtmlElement, i) => (\n        <ElementGeneric tileHtmlElement={tileHtmlElement} key={i} />\n    ))\n\n    return <section>{elems}</section>\n}\n\nexport default TilePageSection\n","import React from 'react'\nimport { TileHtmlString } from '../../../pre-build/static'\n\ninterface Props {\n    tileHtmlString: TileHtmlString\n}\n\nconst ElementDiv = ({ tileHtmlString }: Props) => {\n    return <div dangerouslySetInnerHTML={{ __html: tileHtmlString.html }}></div>\n}\n\nexport default ElementDiv\n","import React from 'react'\nimport { TileHtmlElement } from '../../../pre-build/static'\nimport ElementGeneric from './ElementGeneric'\nimport styled from 'styled-components/macro'\nimport theme from '../../../theme'\n\nconst MainStyled = styled.main`\n    margin-bottom: ${theme.spacing.space1}rem;\n`\n\ninterface Props {\n    tileHtmlElement: TileHtmlElement\n}\n\nconst ElementMain = ({ tileHtmlElement }: Props) => {\n    const elems = tileHtmlElement.children!.map((child, i) => (\n        <ElementGeneric tileHtmlElement={child} key={i} />\n    ))\n\n    return <MainStyled>{elems}</MainStyled>\n}\n\nexport default ElementMain\n","import React from 'react'\nimport { MediaObjectType, TileHtmlElement } from '../../../pre-build/static'\nimport { useSelector } from 'react-redux'\nimport {\n    selectMediaObjectFromId,\n    selectBibliographyEntry,\n} from '../../../selectors'\nimport { RootState } from '../../../store'\nimport styled from 'styled-components/macro'\nimport InlineReference from '../../InlineReference'\n\nconst MediaContainer = styled.div`\n    position: relative;\n`\n\nconst InlineReferenceCorner = styled(InlineReference)`\n    position: absolute;\n    top: 0;\n    right: 0;\n`\n\ninterface Props {\n    attributes: TileHtmlElement['attributes']\n}\n\nconst ObjectElement = ({ attributes }: Props) => {\n    const mediaObjectId = attributes.data!\n    const mediaObject = useSelector((state: RootState) =>\n        selectMediaObjectFromId(state, mediaObjectId)\n    )\n    if (!mediaObject) {\n        throw new Error(`unknown media object ${mediaObjectId}`)\n    }\n\n    const bibliographyEntry = useSelector((state: RootState) =>\n        selectBibliographyEntry(state, mediaObject.id)\n    )\n    let inlineReferenceElem: JSX.Element | null = null\n    if (bibliographyEntry) {\n        inlineReferenceElem = (\n            <InlineReferenceCorner bibliographyKey={bibliographyEntry.id} />\n        )\n    }\n    if (mediaObject.mediaType === MediaObjectType.IMAGE) {\n        return (\n            <MediaContainer>\n                <img src={mediaObject.urls[0]} alt={mediaObject.id} />\n                {inlineReferenceElem}\n            </MediaContainer>\n        )\n    } else if (mediaObject.mediaType === MediaObjectType.VIDEO) {\n        return (\n            <MediaContainer>\n                <video controls autoPlay muted>\n                    {/* <source src=\"/media/examples/flower.webm\"\n                            type=\"video/webm\"> */}\n                    <source src={mediaObject.urls[0]} type=\"video/mp4\" />\n                    Sorry, your browser doesn't support mp4 videos.\n                </video>\n                {inlineReferenceElem}\n            </MediaContainer>\n        )\n    } else {\n        throw new Error(`invalid ${mediaObject.mediaType}`)\n    }\n}\n\nexport default ObjectElement\n","import React from 'react'\nimport {\n    TileHtmlElement,\n    TileHtmlString,\n    TileHtmlDiscriminants,\n    CONSTANTS,\n} from '../../../pre-build/static'\nimport ElementBlockQuote from './ElementBlockQuote'\nimport TilePageSection from './ElementSection'\nimport ElementDiv from './ElementDiv'\nimport ElementMain from './ElementMain'\nimport ObjectElement from './ElementObject'\n\ninterface PropsNested {\n    tileHtmlElement: TileHtmlElement\n}\n\nconst ElementGenericContainer = ({ tileHtmlElement }: PropsNested) => {\n    switch (tileHtmlElement.type) {\n        case 'section':\n            return <TilePageSection tileHtmlElement={tileHtmlElement} />\n        case 'main':\n            return <ElementMain tileHtmlElement={tileHtmlElement} />\n        default:\n            throw new Error(`invalid tile html type ${tileHtmlElement.type}`)\n    }\n}\n\nconst ElementGenericEnd = ({ tileHtmlElement }: PropsNested) => {\n    const tileHtmlString = tileHtmlElement.children[0] as TileHtmlString\n    switch (tileHtmlElement.type) {\n        case 'blockquote':\n            return (\n                <ElementBlockQuote\n                    tileHtmlString={tileHtmlString}\n                    attributes={tileHtmlElement.attributes}\n                />\n            )\n        case 'div':\n            return <ElementDiv tileHtmlString={tileHtmlString} />\n        case 'object':\n            return <ObjectElement attributes={tileHtmlElement.attributes} />\n        default:\n            throw new Error(`invalid tile html type ${tileHtmlElement.type}`)\n    }\n}\n\ninterface Props {\n    // Can only really be a TileHtmlElement, otherwise we throw and error\n    tileHtmlElement: TileHtmlElement | TileHtmlString\n}\n\nconst ElementGeneric = ({ tileHtmlElement }: Props) => {\n    if (tileHtmlElement.discriminant === TileHtmlDiscriminants.ELEMENT) {\n        if (\n            CONSTANTS.NORMAL_TILE_CONTENT_CONTAINER_TAGS.includes(\n                tileHtmlElement.type\n            )\n        ) {\n            return <ElementGenericContainer tileHtmlElement={tileHtmlElement} />\n        } else {\n            return <ElementGenericEnd tileHtmlElement={tileHtmlElement} />\n        }\n    } else {\n        throw new Error(`invalid tile html string`)\n    }\n}\n\nexport default ElementGeneric\n","import ContentsNormal from './ContentsNormal'\n\nexport default ContentsNormal\n","import React from 'react'\nimport { FrontendTileContent } from '../../../pre-build/static'\nimport ElementGeneric from './ElementGeneric'\n\ninterface Props {\n    tileContent: FrontendTileContent\n}\n\nconst ContentsNormalTile = ({ tileContent }: Props) => {\n    const elems = tileContent.children.map((tileHtmlElement, i) => (\n        <ElementGeneric tileHtmlElement={tileHtmlElement} key={i} />\n    ))\n    return <div>{elems}</div>\n}\n\nexport default ContentsNormalTile\n","import React from 'react'\nimport { BibliographyKey } from '../../../models'\nimport InlineReference from '../../InlineReference'\n\ninterface Props {\n    bibliographyKey: BibliographyKey\n}\n\nconst ElementCitationLink = ({ bibliographyKey }: Props) => {\n    return <InlineReference bibliographyKey={bibliographyKey} />\n}\n\nexport default ElementCitationLink\n","import React, { FunctionComponent } from 'react'\nimport {\n    CONSTANTS,\n    TileHtmlDiscriminants,\n    TileHtmlElement,\n    TileHtmlString,\n} from '../../../pre-build/static'\nimport ElementCitationLink from './ElementCitationLink'\n\ninterface Props {\n    tileHtml: TileHtmlElement | TileHtmlString\n}\n\nconst ElementGeneric: FunctionComponent<Props> = ({ tileHtml }) => {\n    switch (tileHtml.discriminant) {\n        case TileHtmlDiscriminants.ELEMENT:\n            if (\n                Object.keys(tileHtml.attributes).includes(\n                    CONSTANTS.BIBLIOGRAPHY_KEY\n                )\n            ) {\n                return (\n                    <ElementCitationLink\n                        bibliographyKey={\n                            tileHtml.attributes[CONSTANTS.BIBLIOGRAPHY_KEY]\n                        }\n                    />\n                )\n            } else {\n                // We must make sure to not set children to elements tags that shouldnt have\n                // any, otherwise react will not be happy.\n                let childElements: Array<JSX.Element> | null = null\n                if (tileHtml.children && tileHtml.children.length) {\n                    childElements = tileHtml.children.map(\n                        (childTileHtml, i) => (\n                            <ElementGeneric key={i} tileHtml={childTileHtml} />\n                        )\n                    )\n                }\n                const TagName = tileHtml.type as keyof JSX.IntrinsicElements\n                return <TagName>{childElements}</TagName>\n            }\n        case TileHtmlDiscriminants.STRING:\n            return <React.Fragment>{tileHtml.html}</React.Fragment>\n        default:\n            console.error(tileHtml)\n            throw new Error(`unknown TileHtml discriminant`)\n    }\n}\n\nexport default ElementGeneric\n","import ContentsChapter from './ContentsChapter'\n\nexport default ContentsChapter\n","import React from 'react'\nimport { FrontendChapterTileContent } from '../../../pre-build/static'\nimport ElementGeneric from './ElementGeneric'\n\ninterface Props {\n    chapterTileContent: FrontendChapterTileContent\n}\n\nconst ContentsChapter = ({ chapterTileContent }: Props) => {\n    const elems = chapterTileContent.children.map((tileHtml, i) => (\n        <ElementGeneric key={i} tileHtml={tileHtml} />\n    ))\n    return <div>{elems}</div>\n}\n\nexport default ContentsChapter\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport theme from '../../theme'\n\nconst TagContainer = styled.ul`\n    text-align: right;\n    padding: ${theme.spacing.space1}rem 0;\n`\n\nconst Tag = styled.li`\n    display: inline-block;\n    margin: 0 0.5rem;\n    color: ${theme.colors.textDark};\n    background-color: ${theme.colors.tagsBackground};\n`\n\ninterface Props {\n    tags: Array<string>\n}\n\nconst Tags = ({ tags }: Props) => {\n    const tagsElems = tags.map((tag) => <Tag key={tag}>#{tag}</Tag>)\n    return <TagContainer>{tagsElems}</TagContainer>\n}\n\nexport default Tags\n","import React, { ErrorInfo } from 'react'\nimport ReactGA from 'react-ga'\n\ninterface Props {\n    tileId: string\n}\n\ninterface State {\n    hasError: boolean\n}\n\nclass ErrorBoundary extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = { hasError: false }\n    }\n\n    static getDerivedStateFromError(error: Error) {\n        return { hasError: true }\n    }\n\n    componentDidCatch(error: Error, info: ErrorInfo) {\n        ReactGA.exception({\n            description: `TILE ${this.props.tileId} error rendering HTML contents`,\n            fatal: false,\n        })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                <h1>☢ Something went wrong : content cannot be rendered ☢</h1>\n            )\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary\n","import React from 'react'\nimport { BibliographyEntry } from '../../models'\nimport styled from 'styled-components/macro'\nimport theme from '../../theme'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { removeReferenceEntry } from '../../store/referenceViewer'\nimport { selectReferenceViewerEntryIndex } from '../../selectors'\nimport { RootState } from '../../store'\n\ninterface Props {\n    bibliographyEntry: BibliographyEntry\n}\n\nexport const Container = styled.div`\n    display: flex;\n\n    a {\n        color: ${theme.colors.textLinkLight};\n    }\n`\n\nconst IndexNumber = styled.div`\n    text-decoration: underline;\n    margin-right: ${theme.spacing.space1}rem;\n`\n\nconst Citation = styled.div`\n    flex: 1;\n    overflow-wrap: anywhere;\n`\n\nconst CloseButton = styled.button`\n    border: none;\n    background-color: transparent;\n    align-self: baseline;\n    font-size: 150%;\n    margin-left: ${theme.spacing.space1}rem;\n`\n\nconst BibliographyEntryComponent = ({ bibliographyEntry }: Props) => {\n    const dispatch = useDispatch()\n    const referenceViewerIndex = useSelector((state: RootState) =>\n        selectReferenceViewerEntryIndex(state, bibliographyEntry.id)\n    )\n    const onClose = () => dispatch(removeReferenceEntry(bibliographyEntry.id))\n    return (\n        <Container>\n            <IndexNumber>{referenceViewerIndex}</IndexNumber>\n            <Citation\n                dangerouslySetInnerHTML={{ __html: bibliographyEntry.citation }}\n            ></Citation>\n            <CloseButton onClick={onClose}>X</CloseButton>\n        </Container>\n    )\n}\n\nexport default BibliographyEntryComponent\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectReferenceViewerBibliograhyEntries } from '../../selectors'\nimport styled from 'styled-components/macro'\nimport theme from '../../theme'\nimport BibliographyEntryComponent, {\n    Container as BibliographyEntryComponentContainer,\n} from './BibliographyEntryComponent'\n\nconst Container = styled.div`\n    overflow-wrap: break-word;\n    bottom: 0;\n    z-index: 1;\n    padding: ${theme.spacing.space1}rem;\n\n    ${BibliographyEntryComponentContainer} {\n        padding: ${theme.spacing.space1 / 2}rem 0;\n    }\n    ${BibliographyEntryComponentContainer}:first-child {\n        padding-top: 0;\n    }\n    ${BibliographyEntryComponentContainer}:last-child {\n        padding-bottom: 0;\n    }\n`\n\nconst InlineReferencePopup: React.FunctionComponent<React.HTMLAttributes<\n    HTMLDivElement\n>> = (props) => {\n    const bibliographyEntries = useSelector(\n        selectReferenceViewerBibliograhyEntries\n    )\n    const bibliographyElems = bibliographyEntries.map((bibliographyEntry) =>\n        bibliographyEntry ? (\n            <BibliographyEntryComponent\n                bibliographyEntry={bibliographyEntry}\n                key={bibliographyEntry.id}\n            />\n        ) : null\n    )\n\n    if (bibliographyEntries.length === 0) {\n        return null\n    }\n\n    return (\n        <Container className={props.className}>{bibliographyElems}</Container>\n    )\n}\n\nexport default InlineReferencePopup\n","import ReferencerViewer from './ReferenceViewer'\nexport default ReferencerViewer\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../store'\nimport { selectTileFromId } from '../../selectors'\nimport { TileType, TileId } from '../../models'\nimport ContentsNormalTile from './ContentsNormal'\nimport ContentsChapter from './ContentsChapter'\nimport styled from 'styled-components/macro'\nimport theme from '../../theme'\nimport {\n    FrontendTileContent,\n    FrontendChapterTileContent,\n} from '../../pre-build/static'\nimport Tags from './Tags'\nimport { INTRO_TILE_ID, SITE_TITLE } from '../../constants'\nimport ErrorBoundary from './ErrorBoundary'\nimport ReferencerViewer from '../ReferenceViewer'\n\nconst borderMixin = `\n    border: 3px solid ${theme.colors.textLight};\n`\n\ninterface PageContentProps {\n    hasTags: boolean\n}\n\nconst PageContent = styled.div<PageContentProps>`\n    flex: 1;\n    overflow: auto;\n    img,\n    video {\n        width: 100%;\n    }\n\n    ${(props) =>\n        !props.hasTags\n            ? `\n    > *:first-child {\n        margin-top: ${theme.spacing.space1}rem;\n    }\n    `\n            : ''}\n\n    section > *,\n    main > *,\n    p {\n        margin-top: ${theme.spacing.space1}rem;\n    }\n\n    section > *:first-child,\n    main > *:first-child,\n    p:first-child {\n        margin-top: 0;\n    }\n\n    section > *:last-child,\n    main > *:last-child {\n        margin-bottom: ${theme.spacing.space1}rem;\n    }\n\n    ul {\n        list-style: disc;\n        padding-left: 2em;\n    }\n`\n\nconst Title = styled.h1`\n    ${borderMixin}\n    display: flex;\n    flex-direction: row;\n    min-height: 3em;\n\n    > * {\n        align-self: center;\n    }\n`\n\nconst TitleText = styled.div`\n    display: inline-block;\n`\n\nconst BackButton = styled.button`\n    align-self: center;\n    background: none;\n    border: none;\n    font-size: 150%;\n    padding: 0 0.5em;\n`\n\nconst StyledReferencerViewer = styled(ReferencerViewer)`\n    ${borderMixin}\n`\n\ninterface Props {\n    tileId: TileId\n    tileContent: FrontendTileContent | FrontendChapterTileContent\n    onBackClicked: (event: React.SyntheticEvent) => void\n}\n\nconst ContentsGeneric = ({ tileId, onBackClicked, tileContent }: Props) => {\n    const tile = useSelector((state: RootState) =>\n        selectTileFromId(state, tileId)\n    )\n    if (!tile) {\n        throw new Error(`unknown tile id ${tileId}`)\n    }\n    const hasTags = !!tile.tags.length\n\n    let contentsElem: JSX.Element\n    if (tile.type === TileType.tile) {\n        contentsElem = (\n            <ContentsNormalTile\n                tileContent={tileContent as FrontendTileContent}\n            />\n        )\n    } else if (tile.type === TileType.chapter) {\n        if (tile.id === INTRO_TILE_ID) {\n            tileContent.title = SITE_TITLE\n        }\n        contentsElem = (\n            <ContentsChapter\n                chapterTileContent={tileContent as FrontendChapterTileContent}\n            />\n        )\n    } else {\n        throw new Error(`invalid tile type ${tile.type}`)\n    }\n\n    return (\n        <React.Fragment>\n            <Title>\n                <BackButton onClick={onBackClicked}>{'<'}</BackButton>\n                <TitleText>{tileContent.title}</TitleText>\n            </Title>\n            {hasTags ? <Tags tags={tile.tags} /> : null}\n            <PageContent hasTags={hasTags}>\n                <ErrorBoundary tileId={tile.id}>{contentsElem}</ErrorBoundary>\n            </PageContent>\n            <StyledReferencerViewer />\n        </React.Fragment>\n    )\n}\n\nexport default ContentsGeneric\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { TileId, tileContentUrl } from '../../models'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { zoomOutTile, ZoomStatus } from '../../store/zoomedTile'\nimport { useGetJson } from '../../hooks'\nimport Loading from '../Loading'\nimport {\n    FrontendTileContent,\n    FrontendChapterTileContent,\n} from '../../pre-build/static'\nimport theme from '../../theme'\nimport { selectZoomedTileStatus } from '../../selectors'\nimport { PAGE_ZOOM_DURATION } from '../../constants'\nimport ContentsGeneric from './ContentsGeneric'\n\ninterface OuterContainerProps {\n    hasBackground: boolean\n}\n\ninterface InnerContainerProps {\n    hasOpacity: boolean\n}\n\nconst PageOuterContainer = styled.div<OuterContainerProps>`\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n\n    ${theme.mixins.scrollbar}\n\n    transition-timing-function: linear;\n    transition-property: background-color;\n    transition-duration: ${PAGE_ZOOM_DURATION}s;\n    background-color: ${(props) =>\n        props.hasBackground ? theme.colors.tilePageBackground : 'transparent'};\n\n    color: ${theme.colors.textLight};\n    button {\n        color: ${theme.colors.textLight};\n    }\n`\n\nconst PageInnerContainer = styled.div<InnerContainerProps>`\n    max-width: 900px;\n    margin: auto;\n    padding: ${theme.spacing.space1}rem;\n    height: 100%;\n    overflow: auto;\n    display: flex;\n    flex-direction: column;\n\n    transition-timing-function: linear;\n    transition-property: opacity;\n    transition-duration: ${PAGE_ZOOM_DURATION * 0.5}s;\n    opacity: ${(props) => (props.hasOpacity ? '1' : '0')};\n`\n\nconst LoadingContainer = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n`\n\ninterface Props {\n    tileId: TileId\n}\n\nconst TilePage = ({ tileId }: Props) => {\n    const dispatch = useDispatch()\n    const zoomStatus = useSelector(selectZoomedTileStatus)\n\n    const { response, error, isLoading } = useGetJson<\n        FrontendTileContent | FrontendChapterTileContent\n    >(tileContentUrl(tileId))\n    if (error) {\n        console.error(error)\n    }\n\n    const _onBackClicked = (event: React.SyntheticEvent) => {\n        event.preventDefault()\n        dispatch(zoomOutTile())\n    }\n\n    const _onOuterContainerClicked = (event: React.SyntheticEvent) => {\n        if (zoomStatus === ZoomStatus.ZOOMED) {\n            _onBackClicked(event)\n        }\n    }\n\n    const _preventClickBubble = (event: React.SyntheticEvent) => {\n        event.stopPropagation()\n    }\n\n    const isInnerContentReadyToRender =\n        !isLoading &&\n        !error &&\n        response &&\n        [ZoomStatus.ZOOMED, ZoomStatus.ZOOMING_OUT].includes(zoomStatus)\n\n    // We need to first have opacity 0 at first render of the content, and immediately after provoke a re-render\n    // with opacity 1 to trigger the css transitions, same for background.\n    const [innerContentInitialized, setInnerContentInitialized] = useState<\n        boolean\n    >(false)\n    const [outerContainerInitialized, setOuterContainerInitialized] = useState<\n        boolean\n    >(false)\n    // No idea why this works better with a timeout\n    useEffect(() => {\n        setTimeout(() => setOuterContainerInitialized(true), 1)\n        if (isInnerContentReadyToRender) {\n            setTimeout(() => setInnerContentInitialized(true), 1)\n        }\n    }, [zoomStatus, isInnerContentReadyToRender])\n\n    let innerContent: JSX.Element | null = null\n    let loadingElem: JSX.Element | null = null\n    if (isInnerContentReadyToRender) {\n        innerContent = (\n            <ContentsGeneric\n                tileId={tileId}\n                onBackClicked={_onBackClicked}\n                tileContent={response!}\n            />\n        )\n    } else {\n        loadingElem = (\n            <LoadingContainer>\n                <Loading />\n            </LoadingContainer>\n        )\n    }\n\n    const innerContentHasOpacity =\n        innerContentInitialized && zoomStatus !== ZoomStatus.ZOOMING_OUT\n    const outerContainerHasBackground =\n        outerContainerInitialized && zoomStatus !== ZoomStatus.ZOOMING_OUT\n\n    return (\n        <PageOuterContainer\n            onClick={_onOuterContainerClicked}\n            hasBackground={outerContainerHasBackground}\n        >\n            {/* Prevent click from bubbling to the outer container\n            so it doesn't close the page */}\n            <PageInnerContainer\n                onClick={_preventClickBubble}\n                hasOpacity={innerContentHasOpacity}\n            >\n                {innerContent}\n            </PageInnerContainer>\n            {loadingElem}\n        </PageOuterContainer>\n    )\n}\n\nexport default React.memo(TilePage)\n","import TilePage from './TilePage'\n\nexport default TilePage\n","import React from 'react'\nimport { TILE_SIZE } from '../../constants'\nimport styled from 'styled-components/macro'\n\n// Pointer events none, to avoid browser thinking you're trying to drag/drop an image\nconst ImageNoPointerEvents = styled.img`\n    pointer-events: none;\n    user-select: none;\n`\n\ninterface Props {\n    urls: Array<string>\n}\n\nconst ThumbnailImage = ({ urls }: Props) => {\n    const url = urls[0]\n    return (\n        <ImageNoPointerEvents width={TILE_SIZE} height={TILE_SIZE} src={url} />\n    )\n}\n\nexport default ThumbnailImage\n","import React from 'react'\n\ninterface Props {\n    urls: Array<string>\n    videoId?: string\n}\n\nconst ThumbnailVideo = ({ urls, videoId }: Props) => {\n    // REF for \"playsinline\" :\n    // https://stackoverflow.com/questions/41512200/how-do-some-websites-play-video-inline-in-ios-safari\n    return (\n        <video\n            id={videoId}\n            autoPlay\n            loop\n            muted\n            playsInline\n            height=\"100%\"\n            width=\"100%\"\n        >\n            <source src={urls[0]} type=\"video/mp4\" />\n        </video>\n    )\n}\n\nexport default ThumbnailVideo\n","import { TileId } from '../models'\nimport { PAN_ZOOM_SET_INTERNAL, PanZoomStateTypes } from './panZoom'\n\nexport const CLICKED_TILE_START = 'CLICKED_TILE_START'\nexport const CLICKED_TILE_END = 'CLICKED_TILE_END'\nexport const CLICKED_TILE_SET_SOUND_ON = 'CLICKED_TILE_SET_SOUND_ON'\n\ninterface ClickStart {\n    type: typeof CLICKED_TILE_START\n    payload: {\n        tileId: TileId\n    }\n}\n\ninterface ClickEnd {\n    type: typeof CLICKED_TILE_END\n    payload: {\n        tileId: TileId\n    }\n}\n\nexport interface SetSoundOn {\n    type: typeof CLICKED_TILE_SET_SOUND_ON\n    payload: {\n        tileId: TileId | null\n        // Needed for the side-effect (for muting previous video)\n        previousTileId: TileId | null\n    }\n}\n\nexport type ClickedTileActionTypes = ClickStart | ClickEnd | SetSoundOn\n\nexport const clickedTileStart = (tileId: TileId): ClickedTileActionTypes => {\n    return {\n        type: CLICKED_TILE_START,\n        payload: { tileId },\n    }\n}\n\nexport const clickedTileEnd = (tileId: TileId): ClickedTileActionTypes => {\n    return {\n        type: CLICKED_TILE_END,\n        payload: { tileId },\n    }\n}\n\nexport const clickedTileSetSoundOn = (\n    tileId: TileId | null,\n    previousTileId: TileId | null\n): ClickedTileActionTypes => {\n    return {\n        type: CLICKED_TILE_SET_SOUND_ON,\n        payload: { tileId, previousTileId },\n    }\n}\n\nexport interface ClickedTileState {\n    clicked: TileId | null\n    focused: TileId | null\n    sound: TileId | null\n    dragged: boolean\n}\n\nconst initialState: ClickedTileState = {\n    clicked: null,\n    focused: null,\n    sound: null,\n    dragged: false,\n}\n\nexport function clickedTileReducer(\n    state = initialState,\n    action: ClickedTileActionTypes | PanZoomStateTypes\n): ClickedTileState {\n    switch (action.type) {\n        // We want to avoid clicks on drag actions, so we\n        // memorize the start of a click, and cancel the click\n        // if the user dragged before we receive click end.\n        case CLICKED_TILE_START:\n            return { ...state, clicked: action.payload.tileId, dragged: false }\n\n        case PAN_ZOOM_SET_INTERNAL:\n            // Cancel the click only if transform changed, meaning that a drag/zoom occurred.\n            if (action.payload.transformMatrixChanged) {\n                return {\n                    ...state,\n                    clicked: null,\n                    dragged: true,\n                    // Animations make the app too slow.\n                    // So when panning, we remove focus to hide animations\n                    focused: null,\n                }\n            } else {\n                return state\n            }\n\n        case CLICKED_TILE_END:\n            return {\n                ...state,\n                clicked: null,\n                dragged: false,\n                focused:\n                    // If a drag has occurred, we don't change the state of focus\n                    state.dragged === false\n                        ? state.clicked &&\n                          // If the end of the click occurs on the same tile that was already being clicked\n                          state.clicked === action.payload.tileId &&\n                          // If that tile is already focused, we unfocus\n                          state.focused !== action.payload.tileId\n                            ? // we set that tile to `focused`.\n                              state.clicked\n                            : null\n                        : state.focused,\n            }\n\n        case CLICKED_TILE_SET_SOUND_ON:\n            return {\n                ...state,\n                sound: action.payload.tileId,\n                focused: null,\n            }\n\n        default:\n            return state\n    }\n}\n","import styled from 'styled-components/macro'\nimport { clickedTileStart, clickedTileEnd } from '../../store/clickedTile'\nimport { TileId } from '../../models'\nimport theme from '../../theme'\nimport { useDispatch } from 'react-redux'\nimport { isTouchDevice } from '../../utils'\nimport React from 'react'\n\nexport const HexagonClippedGroup = styled.div`\n    /* this is the child container cut as HEX, therefore\n    this needs to respond to clicks */\n    pointer-events: all;\n    ${theme.mixins.polygonClipPath}\n    height: 100%;\n    width: 100%;\n`\n\ninterface TileClickHandlers {\n    onMouseDown?: (event: React.MouseEvent) => void\n    onTouchStart?: (event: React.TouchEvent) => void\n    onMouseUp?: (event: React.MouseEvent) => void\n    onTouchEnd?: (event: React.TouchEvent) => void\n}\n\nexport const useTileClick = (tileId: TileId) => {\n    const dispatch = useDispatch()\n    const handlers: TileClickHandlers = {}\n    const _onClickOrTouchStart = () => dispatch(clickedTileStart(tileId))\n\n    if (isTouchDevice()) {\n        handlers.onTouchStart = _onClickOrTouchStart\n        handlers.onTouchEnd = (event: React.TouchEvent) => {\n            // In the case there is no tile controls visible, and the touch end\n            // occurs right where a button is about to appear, the bouton will be\n            // clicked in the same event handling cycle, which is not what we want.\n            // Instead we just want the controls to appear and that's all, therefore\n            // we block the button click by using `preventDefault`.\n            event.preventDefault()\n            dispatch(clickedTileEnd(tileId))\n        }\n    } else {\n        handlers.onMouseDown = _onClickOrTouchStart\n        handlers.onMouseUp = () => {\n            dispatch(clickedTileEnd(tileId))\n        }\n    }\n\n    return handlers\n}\n","import React from 'react'\nimport ThumbnailImage from './ThumbnailImage'\nimport { FrontendTile } from '../../models'\nimport styled from 'styled-components/macro'\nimport { MediaObjectType } from '../../pre-build/static'\nimport ThumbnailVideo from './ThumbnailVideo'\nimport { buildThumbnailVideoId } from '../../utils'\nimport { HexagonClippedGroup, useTileClick } from './shared'\n\nconst Container = styled.div`\n    height: 100%;\n    width: 100%;\n    position: relative;\n    background-color: transparent;\n`\n\ninterface Props {\n    tile: FrontendTile\n    isFocused: boolean\n}\n\nconst TileHexagonNormal = ({ tile, isFocused }: Props) => {\n    const tileClickHandlers = useTileClick(tile.id)\n    const thumbnailComponent =\n        tile.thumbnailType === MediaObjectType.VIDEO ? (\n            <ThumbnailVideo\n                urls={tile.thumbnails}\n                videoId={buildThumbnailVideoId(tile.id)}\n            />\n        ) : (\n            <ThumbnailImage urls={tile.thumbnails} />\n        )\n\n    return (\n        <Container>\n            <HexagonClippedGroup {...tileClickHandlers}>\n                {thumbnailComponent}\n            </HexagonClippedGroup>\n        </Container>\n    )\n}\n\nexport default TileHexagonNormal\n","import React from 'react'\nimport { FrontendTile } from '../../models'\nimport styled from 'styled-components/macro'\nimport { HexagonClippedGroup, useTileClick } from './shared'\n\nconst Container = styled.div`\n    width: 100%;\n    height: 100%;\n`\n\nconst ClickArea = styled(HexagonClippedGroup)`\n    width: 100%;\n    height: 100%;\n    background-color: black;\n`\n\ninterface Props {\n    tile: FrontendTile\n    isFocused: boolean\n}\n\nconst TileHexagonChapter = ({ tile }: Props) => {\n    const tileClickHandlers = useTileClick(tile.id)\n    return (\n        <Container>\n            <ClickArea {...tileClickHandlers}></ClickArea>\n        </Container>\n    )\n}\n\nexport default TileHexagonChapter\n","import styled from 'styled-components/macro'\nimport React from 'react'\nimport { TILE_SIZE } from '../../constants'\nimport { Point } from '../../models'\n\ninterface Props {\n    position: Point\n    className?: string\n}\n\nconst Container = styled.div`\n    position: absolute;\n    /* this is the parent container, whose children will be cut as HEXes, therefore\n    we need to let clicks go through to these hexes */\n    pointer-events: none;\n`\n\nexport const HexagonContainer: React.FunctionComponent<React.PropsWithChildren<\n    Props\n>> = ({ position, className, children }) => {\n    // Apply offset to center the tile around 0\n    const centeredPosition = {\n        x: position.x - TILE_SIZE / 2,\n        y: position.y - TILE_SIZE / 2,\n    }\n    // We inline this style here to not put it in the styled components, which would create many classes.\n    const inlineStyle: React.CSSProperties = {\n        left: `${centeredPosition.x}px`,\n        top: `${centeredPosition.y}px`,\n        width: `${TILE_SIZE}px`,\n        height: `${TILE_SIZE}px`,\n    }\n    return (\n        <Container style={inlineStyle} className={className}>\n            {children}\n        </Container>\n    )\n}\n\nexport default React.memo(HexagonContainer)\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components/macro'\nimport { HEXAGON_FORMULA } from '../../../constants'\nimport theme from '../../../theme'\nimport { makeSvgPath } from '../../../utils'\n\nconst displace = theme.tileOverlay.hexagons.displace\nconst blurRadius = theme.tileOverlay.hexagons.blurRadius\n\nconst hexagonKeyframes = keyframes`\n    0%, 3% {\n        filter: blur(${blurRadius});\n        transform: translate(${displace}px, ${displace}px);\n    }\n    8% {\n        filter: none;\n        transform: none;\n    }\n    21%, 23% {\n        filter: blur(${blurRadius});\n        transform: translate(${displace}px, ${displace}px);\n    }\n    27% {\n        filter: none;\n        transform: none;\n    }\n    68%, 71% {\n        filter: blur(${blurRadius});\n        transform: translate(${displace}px, ${displace}px);\n    }\n    75% {\n        filter: none;\n        transform: none;\n    }\n    98%, 100% {\n        filter: blur(${blurRadius});\n        transform: translate(${displace}px, ${displace}px);\n    }\n`\n\nconst Hexagon = styled.path`\n    fill: transparent;\n    stroke: white;\n    stroke-width: ${theme.tileOverlay.hexagons.strokeWidth};\n    animation: ${hexagonKeyframes} linear 1000ms infinite alternate-reverse;\n    stroke-linecap: round;\n`\n\nconst HexagonRedShadow = styled.path`\n    transform: translate(0, 0);\n    stroke: ${theme.colors.glitchRed};\n    stroke-width: ${theme.tileOverlay.hexagons.strokeWidth};\n    fill: none;\n`\n\nconst HexagonBlueShadow = styled.path`\n    transform: translate(${displace}px, ${displace}px);\n    stroke: ${theme.colors.glitchBlue};\n    stroke-width: ${theme.tileOverlay.hexagons.strokeWidth};\n    fill: none;\n`\n\ninterface Props {\n    width: number\n    height: number\n}\n\nconst GlitchyHexagons: React.FunctionComponent<Props> = ({ width, height }) => {\n    const svgHexagonPath = makeSvgPath(HEXAGON_FORMULA, [width, height])\n    return (\n        <>\n            <HexagonRedShadow d={svgHexagonPath} />\n            <HexagonBlueShadow d={svgHexagonPath} />\n            <Hexagon d={svgHexagonPath} />\n        </>\n    )\n}\n\nexport default React.memo(GlitchyHexagons)\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { selectSvgTextSize } from '../../../selectors'\nimport theme from '../../../theme'\nimport { splitTextInLines } from '../../../utils'\n\nconst Text = styled.text`\n    text-anchor: middle;\n    font-size: ${theme.fontSizes.basePx}px;\n`\n\ninterface Props {\n    text: string\n    containerWidth: number\n    containerHeight: number\n    centerY: number\n    lineHeightRatio?: number\n    xPadding?: number\n}\n\nconst SvgTextWrapped = ({\n    text,\n    containerWidth,\n    containerHeight,\n    centerY,\n    xPadding = 0,\n    lineHeightRatio = 1,\n    ...props\n}: Props) => {\n    const { charWidth, lineHeight } = useSelector(selectSvgTextSize)\n    const lines = splitTextInLines(\n        text,\n        charWidth,\n        containerWidth - xPadding * 2\n    )\n    const finalLineHeight = lineHeight * lineHeightRatio\n    const tspans = lines.map((line) => (\n        <tspan x={containerWidth / 2} dy={finalLineHeight} key={line}>\n            {line}\n        </tspan>\n    ))\n\n    // Layout rules are the following :\n    // - Text is layed-out centered horizontally and vertically within the container\n    // - If the text would overflow at the bottom of the container, we move it up by `yOffset` to avoid that\n    const halfHeight = (lines.length * finalLineHeight) / 2 + lineHeight / 2\n    // This allows to add an offset when we detect that text would overflow the container's height\n    const yOffset = Math.min(containerHeight - (centerY + halfHeight), 0)\n    const textY = centerY - halfHeight + yOffset\n\n    if (textY < 0) {\n        console.error(`text not fitting in height`)\n    }\n\n    return (\n        <Text y={textY} {...props}>\n            {tspans}\n        </Text>\n    )\n}\n\nexport default React.memo(SvgTextWrapped)\n","import styled, { keyframes } from 'styled-components/macro'\nimport theme from '../../../theme'\nimport SvgTextWrapped from './SvgTextWrapped'\n\nconst textKeyframes = keyframes`\n    0% {\n        stroke-dashoffset: -1000;\n    }\n    50% {\n        stroke-dashoffset: 1000;\n    }\n    100% {\n        stroke-dashoffset: -1000;\n    }\n`\n\nexport default styled(SvgTextWrapped)`\n    text-transform: uppercase;\n    text-shadow: 1px 1px 1px ${theme.colors.glitchBlue},\n        -1px -1px 1px ${theme.colors.glitchRed}, -2px 2px 4px black,\n        2px -2px 4px black;\n    stroke-width: ${theme.tileOverlay.titleAndIcons.strokeWidth}px;\n    stroke-linejoin: round;\n    stroke-dasharray: 40 5;\n    stroke-dashoffset: 0;\n    animation: ${textKeyframes} linear 2000ms infinite alternate-reverse;\n    stroke: ${theme.colors.titleWhite};\n    user-select: none;\n`\n","import React from 'react'\n\nexport const ICON_ORIGINAL_SIZE = 24\n\n// REF : /assets/images/volume_off.svg\nexport const VolumeOffIcon: React.FunctionComponent = () => {\n    return (\n        <>\n            {/* Useful for sizing */}\n            <rect fill=\"none\" stroke=\"none\" height=\"24\" width=\"24\" />\n            <path d=\"M4.34 2.93L2.93 4.34 7.29 8.7 7 9H3v6h4l5 5v-6.59l4.18 4.18c-.65.49-1.38.88-2.18 1.11v2.06c1.34-.3 2.57-.92 3.61-1.75l2.05 2.05 1.41-1.41L4.34 2.93zM10 15.17L7.83 13H5v-2h2.83l.88-.88L10 11.41v3.76zM19 12c0 .82-.15 1.61-.41 2.34l1.53 1.53c.56-1.17.88-2.48.88-3.87 0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zm-7-8l-1.88 1.88L12 7.76zm4.5 8c0-1.77-1.02-3.29-2.5-4.03v1.79l2.48 2.48c.01-.08.02-.16.02-.24z\" />\n        </>\n    )\n}\n\n// REF : /assets/images/volume_on.svg\nexport const VolumeOnIcon: React.FunctionComponent = () => {\n    return (\n        <>\n            {/* Useful for sizing */}\n            <rect fill=\"none\" stroke=\"none\" height=\"24\" width=\"24\" />\n            <path d=\"M3 9v6h4l5 5V4L7 9H3zm7-.17v6.34L7.83 13H5v-2h2.83L10 8.83zM16.5 12c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77 0-4.28-2.99-7.86-7-8.77z\" />\n        </>\n    )\n}\n\n// REF : /assets/images/read_more.svg\nexport const ReadMoreIcon: React.FunctionComponent = () => {\n    return (\n        <>\n            {/* Useful for sizing */}\n            <rect fill=\"none\" stroke=\"none\" height=\"24\" width=\"24\" />\n            <g>\n                <rect height=\"2\" width=\"9\" x=\"13\" y=\"7\" />\n                <rect height=\"2\" width=\"9\" x=\"13\" y=\"15\" />\n                <rect height=\"2\" width=\"6\" x=\"16\" y=\"11\" />\n                <polygon points=\"13,12 8,7 8,11 2,11 2,13 8,13 8,17\" />\n            </g>\n        </>\n    )\n}\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components/macro'\nimport { TileId } from '../../../models'\nimport theme from '../../../theme'\nimport { ICON_ORIGINAL_SIZE } from '../../icons'\n\nexport const ICON_SCALE = 1.5\n\nconst textKeyframes = keyframes`\n    0% {\n        stroke-dashoffset: -1000;\n    }\n    50% {\n        stroke-dashoffset: 1000;\n    }\n    100% {\n        stroke-dashoffset: -1000;\n    }\n`\n\nexport const IconGroup = styled.g`\n    transform: scale(${ICON_SCALE});\n    filter: drop-shadow(1px 1px 1px ${theme.colors.glitchBlue})\n        drop-shadow(-1px -1px 1px ${theme.colors.glitchRed})\n        drop-shadow(-1px 1px 1px black);\n    stroke-width: ${theme.tileOverlay.titleAndIcons.strokeWidth / ICON_SCALE}px;\n    stroke-linejoin: round;\n    stroke-dasharray: 40 5;\n    stroke-dashoffset: 0;\n    animation: ${textKeyframes} linear 2000ms infinite alternate-reverse;\n    stroke: white;\n    fill: none;\n`\n\nconst ButtonGroup = styled.g`\n    pointer-events: all;\n    cursor: pointer;\n    &:hover {\n    }\n\n    & > g {\n        transform: scale();\n    }\n`\n\ninterface PassThroughProps {\n    width: number\n    height: number\n    x: number\n}\n\nexport interface ButtonContainerProps extends PassThroughProps {\n    onClick?: () => void\n}\n\nexport interface ButtonProps extends PassThroughProps {\n    tileId: TileId\n}\n\nexport const ButtonContainer: React.FunctionComponent<React.PropsWithChildren<\n    ButtonContainerProps\n>> = ({ width, height, x, children, onClick }) => {\n    const xIcon = width / 2 - (ICON_ORIGINAL_SIZE * ICON_SCALE) / 2\n    const yIcon = theme.tileOverlay.buttons.paddingTop\n\n    const iconPositionStyle: React.CSSProperties = {\n        transform: `translate(${xIcon}px, ${yIcon}px)`,\n    }\n    const buttonPositionStyle: React.CSSProperties = {\n        transform: `translateX(${x}px)`,\n    }\n\n    return (\n        <ButtonGroup onClick={onClick} style={buttonPositionStyle}>\n            <g style={iconPositionStyle}>{children}</g>\n        </ButtonGroup>\n    )\n}\n\nexport default ButtonContainer\n","import React from 'react'\nimport { clickedTileSetSoundOn } from '../../../store/clickedTile'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectSoundTileId } from '../../../selectors'\nimport ButtonContainer, { ButtonProps, IconGroup } from './ButtonContainer'\nimport { VolumeOffIcon, VolumeOnIcon } from '../../icons'\n\nconst SoundOnOffButton: React.FunctionComponent<ButtonProps> = ({\n    tileId,\n    ...passThroughProps\n}) => {\n    const dispatch = useDispatch()\n    const currentSoundTile = useSelector(selectSoundTileId)\n\n    const _soundOnOffClicked = () =>\n        dispatch(\n            clickedTileSetSoundOn(isSoundOn ? null : tileId, currentSoundTile)\n        )\n\n    const isSoundOn = currentSoundTile === tileId\n    const volumeIcon = isSoundOn ? <VolumeOnIcon /> : <VolumeOffIcon />\n\n    return (\n        <ButtonContainer onClick={_soundOnOffClicked} {...passThroughProps}>\n            <IconGroup>{volumeIcon}</IconGroup>\n        </ButtonContainer>\n    )\n}\n\nexport default SoundOnOffButton\n","import React from 'react'\nimport { useRequestZoomToTile } from '../../../hooks'\nimport { ReadMoreIcon } from '../../icons'\nimport ButtonContainer, { ButtonProps, IconGroup } from './ButtonContainer'\n\nconst MoreButton: React.FunctionComponent<ButtonProps> = ({\n    tileId,\n    ...passThroughProps\n}) => {\n    const [zoomToTileEffect] = useRequestZoomToTile(tileId)\n\n    return (\n        <ButtonContainer onClick={zoomToTileEffect} {...passThroughProps}>\n            <IconGroup>\n                <ReadMoreIcon />\n            </IconGroup>\n        </ButtonContainer>\n    )\n}\n\nexport default MoreButton\n","import React from 'react'\nimport { TileId } from '../../../models'\nimport ButtonsSoundOnOff from './ButtonsSoundOnOff'\nimport ButtonsReadMore from './ButtonsReadMore'\n\nexport type BUTTON_TYPE = 'READ_MORE' | 'SOUND_ON_OFF'\n\ninterface Props {\n    buttons: Array<BUTTON_TYPE>\n    tileId: TileId\n    width: number\n    height: number\n    y: number\n}\n\nconst Buttons: React.FunctionComponent<Props> = ({\n    buttons,\n    tileId,\n    width,\n    height,\n    y,\n}) => {\n    const buttonSlotWidth = width / buttons.length\n    const buttonsElems = buttons.map((buttonType, i) => {\n        if (buttonType === 'SOUND_ON_OFF') {\n            return (\n                <ButtonsSoundOnOff\n                    tileId={tileId}\n                    width={buttonSlotWidth}\n                    height={height}\n                    x={i * buttonSlotWidth}\n                    key={i}\n                />\n            )\n        } else if (buttonType === 'READ_MORE') {\n            return (\n                <ButtonsReadMore\n                    tileId={tileId}\n                    width={buttonSlotWidth}\n                    height={height}\n                    x={i * buttonSlotWidth}\n                    key={i}\n                />\n            )\n        } else {\n            throw new Error(`unexpected button type ${buttonType}`)\n        }\n    })\n\n    const positionStyle: React.CSSProperties = {\n        transform: `translateY(${y}px)`,\n    }\n\n    return <g style={positionStyle}>{buttonsElems}</g>\n}\n\nexport default React.memo(Buttons)\n","import styled from 'styled-components/macro'\nimport theme from '../../../theme'\nimport SvgTextWrapped from './SvgTextWrapped'\n\nexport default styled(SvgTextWrapped)`\n    text-shadow: 1px 1px 1px ${theme.colors.glitchBlueOpacity},\n        -1px -1px 1px ${theme.colors.glitchRedOpacity},\n        -1px 1px 1px rgba(255, 255, 255, 0.5);\n    text-transform: uppercase;\n    stroke-width: ${theme.tileOverlay.titleAndIcons.strokeWidth}px;\n    stroke-linejoin: round;\n    stroke-dasharray: 40 15 20 2 10 2;\n    stroke-dashoffset: 0;\n    stroke: ${theme.colors.titleGrey};\n    user-select: none;\n`\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { TILE_SIZE } from '../../../constants'\nimport { FrontendTile } from '../../../models'\nimport theme from '../../../theme'\nimport GlitchyHexagons from './GlitchyHexagons'\nimport GlitchyTitle from './GlitchyTitle'\nimport Buttons, { BUTTON_TYPE } from './Buttons'\nimport StaticTitle from './StaticTitle'\n\nexport type MODE = 'HALO' | 'FULL' | 'CHAPTER'\n\nconst hexagonsStrokeWidth = theme.tileOverlay.hexagons.strokeWidth\nconst hexagonsDisplace = theme.tileOverlay.hexagons.displace\n\nconst Svg = styled.svg`\n    position: absolute;\n    width: calc(100% + ${hexagonsStrokeWidth * 2}px);\n    height: calc(100% + ${hexagonsStrokeWidth * 2}px);\n    left: -${hexagonsStrokeWidth}px;\n    top: -${hexagonsStrokeWidth}px;\n    z-index: 10;\n    user-select: none;\n`\n\ninterface Props {\n    tile: FrontendTile\n    buttons: Array<BUTTON_TYPE>\n    isShowingButtons: boolean\n    mode: MODE\n}\n\nconst Overlay: React.FunctionComponent<Props> = ({\n    tile,\n    buttons,\n    mode = 'FULL',\n}) => {\n    const containerWidth = TILE_SIZE\n    const containerHeight = TILE_SIZE\n\n    const titleHeight =\n        containerHeight * (1 - theme.tileOverlay.buttons.containerHeight)\n    const titleXPadding =\n        theme.tileOverlay.hexagons.strokeWidth / 2 +\n        theme.tileOverlay.title.xPadding\n\n    // stroke width is centered around the path, so only half the stroke width\n    // would be bleeding outside the viewbox if not adjusted.\n    const viewBoxOffset = hexagonsStrokeWidth / 2 + hexagonsDisplace\n    const viewBoxWidth =\n        containerWidth + hexagonsStrokeWidth + 2 * hexagonsDisplace\n    const viewBoxHeight =\n        containerHeight + hexagonsStrokeWidth + 2 * hexagonsDisplace\n\n    return (\n        <Svg\n            viewBox={`-${viewBoxOffset} -${viewBoxOffset} ${viewBoxWidth} ${viewBoxHeight}`}\n        >\n            {['HALO', 'FULL'].includes(mode) ? (\n                <GlitchyHexagons\n                    width={containerWidth}\n                    height={containerHeight}\n                />\n            ) : null}\n\n            {['FULL'].includes(mode) ? (\n                <GlitchyTitle\n                    text={tile.title}\n                    containerWidth={containerWidth}\n                    containerHeight={titleHeight}\n                    centerY={containerHeight / 2}\n                    xPadding={titleXPadding}\n                />\n            ) : null}\n\n            {['CHAPTER'].includes(mode) ? (\n                <StaticTitle\n                    text={tile.title}\n                    containerWidth={containerWidth}\n                    containerHeight={titleHeight}\n                    centerY={containerHeight / 2}\n                    xPadding={titleXPadding}\n                />\n            ) : null}\n\n            {['FULL'].includes(mode) ? (\n                <Buttons\n                    buttons={buttons}\n                    tileId={tile.id}\n                    width={containerWidth}\n                    height={\n                        containerHeight *\n                        theme.tileOverlay.buttons.containerHeight\n                    }\n                    y={titleHeight}\n                />\n            ) : null}\n        </Svg>\n    )\n}\n\nexport default React.memo(Overlay)\n","import TileHexagon from './TileHexagon'\n\nexport default TileHexagon\n","import React from 'react'\nimport { FrontendTile, TileType } from '../../models'\nimport { useSelector } from 'react-redux'\nimport TilePagePortal from '../TilePagePortal'\nimport TilePage from '../TilePage'\nimport {\n    selectFocusedTileId,\n    selectSoundTileId,\n    selectZoomedTileId,\n} from '../../selectors'\nimport TileHexagonNormal from './TileHexagonNormal'\nimport TileHexagonChapter from './TileHexagonChapter'\nimport HexagonContainer from './HexagonContainer'\nimport Overlay, { MODE } from './Overlay/Overlay'\nimport { BUTTON_TYPE } from './Overlay/Buttons'\nimport { MediaObjectType } from '../../pre-build/static'\n\ninterface Props {\n    tile: FrontendTile\n}\n\nconst TileHexagon = ({ tile }: Props) => {\n    const tileId = tile.id\n    const isZoomed = useSelector(selectZoomedTileId) === tileId\n    const isFocused = useSelector(selectFocusedTileId) === tileId\n    const isPlaying = useSelector(selectSoundTileId) === tileId\n\n    let hexagonContentElem: JSX.Element | null = null\n    const buttonsList: Array<BUTTON_TYPE> = ['READ_MORE']\n    let overlayMode: MODE\n    let hasOverlay: boolean = true\n    if (tile.type === TileType.tile) {\n        hasOverlay = isPlaying || isFocused\n        overlayMode = isFocused ? 'FULL' : 'HALO'\n        hexagonContentElem = (\n            <TileHexagonNormal tile={tile} isFocused={isFocused} />\n        )\n        if (tile.thumbnailType === MediaObjectType.VIDEO) {\n            buttonsList.push('SOUND_ON_OFF')\n        }\n    } else if (tile.type === TileType.chapter) {\n        hasOverlay = true\n        overlayMode = isFocused ? 'FULL' : 'CHAPTER'\n        hexagonContentElem = (\n            <TileHexagonChapter tile={tile} isFocused={isFocused} />\n        )\n    } else {\n        throw new Error(`invalid tile type ${tile.type}`)\n    }\n\n    return (\n        <HexagonContainer position={tile.position}>\n            {hasOverlay ? (\n                <Overlay\n                    tile={tile}\n                    isShowingButtons={true}\n                    buttons={buttonsList}\n                    mode={overlayMode}\n                />\n            ) : null}\n            {hexagonContentElem}\n            {isZoomed ? (\n                <TilePagePortal>\n                    <TilePage tileId={tileId} />\n                </TilePagePortal>\n            ) : null}\n        </HexagonContainer>\n    )\n}\n\nexport default React.memo(TileHexagon)\n","import React from 'react'\nimport deepEqual from 'lodash.isequal'\nimport { TILE_SIZE } from '../../constants'\nimport { HexPoint } from '../../pre-build/static'\nimport { calculatePointFromHexPoint, randInt, randNumber } from '../../maths'\nimport { HexagonClippedGroup } from './shared'\nimport HexagonContainer from './HexagonContainer'\nimport styled, { css, keyframes } from 'styled-components/macro'\nimport sample from 'lodash.sample'\nimport range from 'lodash.range'\n\nconst COLOR_ELEMENT_CHOICE = '123'\nconst COLOR_ELEMENT_BASE = '0'\nconst ANIM_DURATION: [number, number] = [50, 200]\nconst ANIM_STEPS: [number, number] = [5, 10]\nconst ALTERNATIVE_COUNT = 10\n\nconst makeColorKeyframes = () => {\n    const stepsCount = randInt(...ANIM_STEPS)\n    const steps = []\n    for (let i = 0; i < stepsCount; i++) {\n        let color =\n            '#' +\n                sample(COLOR_ELEMENT_CHOICE) +\n                COLOR_ELEMENT_BASE +\n                sample(COLOR_ELEMENT_CHOICE)\n        steps.push([Math.floor((i / stepsCount) * 100), color])\n    }\n    return keyframes`\n        ${steps\n            .map(\n                ([percentage, color]) =>\n                    `${percentage}%{background-color:${color}}`\n            )\n            .join('\\n')}\n    `\n}\n\n// Pre-generate a bunch of random styled components, because if we create these dynamically\n// a new CSS class will be created every time.\nconst AnimatedColor = styled(HexagonClippedGroup)`\n    width: 100%;\n    height: 100%;\n    ${range(ALTERNATIVE_COUNT).map((i) => {\n        const colorKeyframes = makeColorKeyframes()\n        return css`\n            &.alternative${i} {\n                animation: ${colorKeyframes} ${randNumber(...ANIM_DURATION)}ms\n                    ease infinite;\n            }\n        `\n    })}\n`\n\ninterface Props {\n    hexPoint: HexPoint\n}\n\nconst TileEmpty = ({ hexPoint }: Props) => {\n    const point = calculatePointFromHexPoint(hexPoint, TILE_SIZE)\n    const alternativeClassName = `alternative${randInt(0, ALTERNATIVE_COUNT)}`\n    return (\n        <HexagonContainer position={point}>\n            <AnimatedColor className={alternativeClassName} />\n        </HexagonContainer>\n    )\n}\n\n// Deep equal because we want to avoid re-render when receiving hex points that are the\n// same points, but different instances.\nexport default React.memo(TileEmpty, deepEqual)\n","// REF : https://tympanus.net/codrops-playground/yoksel/Y0FaGpOi/editor/html,css,result\nimport React from 'react'\nimport styled, { keyframes, css } from 'styled-components/macro'\nimport { INTRO_TILE_ID, SITE_TITLE, TILE_SIZE } from '../../constants'\nimport { ICON_ORIGINAL_SIZE, ReadMoreIcon } from '../icons'\nimport { useDeviceScaledSettings, useRequestZoomToTile } from '../../hooks'\nimport { FrontendTile } from '../../models'\nimport theme from '../../theme'\nimport HexagonContainer from './HexagonContainer'\nimport TilePagePortal from '../TilePagePortal'\nimport TilePage from '../TilePage'\nimport { useSelector } from 'react-redux'\nimport { selectZoomedTileId } from '../../selectors'\nimport TileEmpty from './TileEmpty'\n\nconst ANIMATION_DURATION = 7000\nconst VIEWBOX_W = TILE_SIZE * 3\nconst VIEWBOX_H = TILE_SIZE\nconst ICON_SCALE = 2\nconst ICON_SCALED_SIZE = ICON_ORIGINAL_SIZE * ICON_SCALE\nconst STROKE_WIDTH = 5\n\nconst Container = styled(HexagonContainer)`\n    z-index: ${theme.zIndex.tileIntro};\n`\n\nconst Svg = styled.svg`\n    height: 100%;\n    transform: translateX(-50%);\n    position: absolute;\n    top: 0;\n    left: 50%;\n`\n\nconst textKeyframes = keyframes`\n    0% {\n        stroke-dashoffset: -1000;\n    }\n    50% {\n        stroke-dashoffset: 1000;\n    }\n    100% {\n        stroke-dashoffset: -1000;\n    }\n`\n\nconst baseStyle = css`\n    stroke: ${theme.colors.titleWhite};\n    fill: black;\n    animation: ${textKeyframes} ${ANIMATION_DURATION}ms infinite linear;\n    stroke-width: ${STROKE_WIDTH};\n    stroke-linejoin: round;\n    stroke-dasharray: 60 10;\n    stroke-dashoffset: 0;\n`\n\nconst ButtonGroup = styled.g`\n    ${baseStyle}\n    stroke-width: ${STROKE_WIDTH / ICON_SCALE};\n    fill: transparent;\n    filter: drop-shadow(1px 1px 1px ${\n        theme.colors.glitchBlue\n    }) drop-shadow(-1px -1px 1px ${theme.colors.glitchRed});\n    cursor: pointer;\n    pointer-events: all;\n\n    & > * {\n        transform: scale(${ICON_SCALE});\n    }\n`\n\nconst Text = styled.text<{ fontSizeRatio: number }>`\n    ${baseStyle}\n    text-anchor: middle;\n    letter-spacing: 0.3em;\n    alignment-baseline: central;\n    text-shadow: 1px 1px 1px ${theme.colors.glitchBlue},\n        -1px -1px 1px ${theme.colors.glitchRed};\n    font-size: ${(props) =>\n        Math.round(props.fontSizeRatio * theme.fontSizes.basePx)}px;\n    user-select: none;\n`\n\ninterface Props {\n    tile: FrontendTile\n}\n\nconst TileIntro: React.FunctionComponent<Props> = ({ tile }) => {\n    const isZoomed = useSelector(selectZoomedTileId) === INTRO_TILE_ID\n    const { titleFontSizeRatio } = useDeviceScaledSettings()\n    const buttonPositionStyle: React.CSSProperties = {\n        transform: `translate(${VIEWBOX_W / 2 - ICON_SCALED_SIZE / 2}px, ${\n            VIEWBOX_H - ICON_SCALED_SIZE * 1.5\n        }px)`,\n    }\n    const [zoomToTileEffect] = useRequestZoomToTile(INTRO_TILE_ID)\n\n    return (\n        <>\n        <TileEmpty hexPoint={tile.hex} />\n        <Container position={tile.position}>\n            <Svg viewBox={`0 0 ${VIEWBOX_W} ${VIEWBOX_H}`}>\n                <Text\n                    x={VIEWBOX_W / 2}\n                    y={VIEWBOX_H / 2}\n                    fontSizeRatio={titleFontSizeRatio}\n                >\n                    {SITE_TITLE}\n                </Text>\n                <ButtonGroup\n                    style={buttonPositionStyle}\n                    onClick={zoomToTileEffect}\n                >\n                    <ReadMoreIcon />\n                </ButtonGroup>\n            </Svg>\n            {isZoomed ? (\n                <TilePagePortal>\n                    <TilePage tileId={INTRO_TILE_ID} />\n                </TilePagePortal>\n            ) : null}\n        </Container>\n        </>\n    )\n}\n\nexport default React.memo(TileIntro)\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { INTRO_TILE_ID } from '../../constants'\nimport {\n    memoizedSelectBackgroundHexPoints,\n    memoizedSelectTilesInView,\n} from '../../selectors'\nimport TileHexagon from '../TileHexagon'\nimport TileEmpty from '../TileHexagon/TileEmpty'\nimport TileIntro from '../TileHexagon/TileIntro'\n\nconst HiveTiles = () => {\n    const tilesInView = useSelector(memoizedSelectTilesInView)\n    const backgroundHexPoints = useSelector(memoizedSelectBackgroundHexPoints)\n    let introElem: JSX.Element | null = null\n    const tileElems: Array<JSX.Element> = []\n    tilesInView.forEach((tile) => {\n        if (tile.id === INTRO_TILE_ID) {\n            introElem = <TileIntro tile={tile} />\n        } else {\n            tileElems.push(<TileHexagon tile={tile} key={tile.id} />)\n        }\n    })\n    const tileEmptyElems = backgroundHexPoints.map((hexPoint) => (\n        <TileEmpty\n            hexPoint={hexPoint}\n            key={`${hexPoint.hex_x},${hexPoint.hex_y}`}\n        />\n    ))\n\n    return (\n        <>\n            {introElem}\n            {tileElems}\n            {tileEmptyElems}\n        </>\n    )\n}\n\nexport default React.memo(HiveTiles)\n","import React, { FunctionComponent } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport { DEBUG } from '../constants'\nimport { convertViewportCoordsToUniverse } from '../panZoom/utils/math'\nimport {\n    selectWindowDimensions,\n    selectTransformMatrix,\n    memoizedSelectViewport,\n} from '../selectors'\n\nconst POINT_RADIUS_PX = 10\n\nconst Container = styled.div``\n\ninterface PointCoordinatesProps {\n    x: number\n    y: number\n}\n\nconst PointCoordinates: FunctionComponent<PointCoordinatesProps> = ({\n    x,\n    y,\n}) => {\n    return (\n        <span>\n            ({Math.round(x)}, {Math.round(y)})\n        </span>\n    )\n}\n\nconst PointContainer = styled.div<{ x: number; y: number; color?: string }>`\n    z-index: 100;\n    border-radius: ${POINT_RADIUS_PX}px;\n    background-color: ${(props) => props.color};\n    position: absolute;\n    width: ${POINT_RADIUS_PX * 2}px;\n    height: ${POINT_RADIUS_PX * 2}px;\n    left: ${(props) => props.x - POINT_RADIUS_PX}px;\n    top: ${(props) => props.y - POINT_RADIUS_PX}px;\n`\n\nconst PointLabel = styled.div`\n    position: absolute;\n    width: 200px;\n    top: 0;\n    left: 0;\n    background-color: rgba(255, 255, 255, 0.3);\n`\n\ninterface PointViewProps {\n    x: number\n    y: number\n    label?: string\n    color?: string\n}\n\nconst PointView: FunctionComponent<PointViewProps> = ({\n    x,\n    y,\n    label = '',\n    color = 'red',\n}) => {\n    return (\n        <PointContainer x={x} y={y} color={color}>\n            <PointLabel>\n                <PointCoordinates x={x} y={y} />\n                <br />\n                <span>{label}</span>\n            </PointLabel>\n        </PointContainer>\n    )\n}\n\ninterface ViewportViewProps {}\n\nconst ViewportView: FunctionComponent<ViewportViewProps> = () => {\n    const { topLeft, bottomRight } = useSelector(memoizedSelectViewport)\n    return (\n        <>\n            <PointView\n                x={topLeft.x}\n                y={topLeft.y}\n                label=\"VIEWPORT - TOP LEFT\"\n                color=\"green\"\n            />\n            <PointView\n                x={bottomRight.x}\n                y={bottomRight.y}\n                label=\"VIEWPORT - BOTTOM RIGHT\"\n                color=\"green\"\n            />\n        </>\n    )\n}\n\n// Component for testing some maths calculations\nconst TestMaths = () => {\n    const transformMatrix = useSelector(selectTransformMatrix)\n    const { width, height } = useSelector(selectWindowDimensions)\n    if (!DEBUG) {\n        return null\n    }\n    const universePoint = convertViewportCoordsToUniverse(\n        transformMatrix,\n        width / 2,\n        height / 2\n    )\n    return (\n        <Container>\n            <PointView\n                x={universePoint.x}\n                y={universePoint.y}\n                label=\"TESTING : conversion {viewport coordinates} -> {universe coordinates} EXPECTED : should be at the center of page\"\n            />\n            <ViewportView />\n        </Container>\n    )\n}\n\nexport default TestMaths\n","import React, { FunctionComponent, CSSProperties, useEffect } from 'react'\nimport styled from 'styled-components/macro'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../store'\nimport { PAGE_ZOOM_DURATION } from '../../constants'\nimport {\n    selectTransformMatrix,\n    selectZoomedTileStatus,\n    memoizedSelectMostCentralTileInView,\n    selectScale,\n} from '../../selectors'\nimport { toSVG } from 'transformation-matrix'\nimport { ZoomStatus } from '../../store/zoomedTile'\nimport { useRequestZoomToTile, useDeviceScaledSettings } from '../../hooks'\nimport HiveTiles from './HiveTiles'\nimport TestMaths from '../TestMaths'\n\ninterface HiveZoomToPageContainerProps {\n    animate: boolean\n}\n\n// !!! Setting width and height to 0 here is important it seems for the calculations of positioning\n// of all elements to work correctly.\nconst HiveZoomToPageContainer = styled.div<HiveZoomToPageContainerProps>`\n    width: 0px;\n    height: 0px;\n    ${(props) =>\n        props.animate\n            ? `\n        transition-property: transform;\n        transition-duration: ${PAGE_ZOOM_DURATION}s;\n        transition-delay: 0s;\n    `\n            : ''}\n`\n\nconst HiveZoomer: FunctionComponent = () => {\n    const { zoomToPageScaleThreshold } = useDeviceScaledSettings()\n    const mostCentralTileId = useSelector((state: RootState) =>\n        memoizedSelectMostCentralTileInView(state)\n    )\n    const shouldZoom = useSelector(selectScale) > zoomToPageScaleThreshold\n    const [zoomToTileEffect, zoomToTileDependencies] = useRequestZoomToTile(\n        shouldZoom ? mostCentralTileId : null\n    )\n    useEffect(zoomToTileEffect, zoomToTileDependencies)\n\n    const transformMatrix = useSelector(selectTransformMatrix)\n    const zoomedTileStatus = useSelector(selectZoomedTileStatus)\n    const inlineStyle: CSSProperties = {\n        transform: toSVG(transformMatrix),\n    }\n    return (\n        <HiveZoomToPageContainer\n            style={inlineStyle}\n            animate={[ZoomStatus.ZOOMING_IN, ZoomStatus.ZOOMING_OUT].includes(\n                zoomedTileStatus\n            )}\n        >\n            <TestMaths />\n            <HiveTiles />\n        </HiveZoomToPageContainer>\n    )\n}\n\nexport default React.memo(HiveZoomer)\n","import { convertViewportCoordsToUniverse } from './utils/math'\nimport { RootState } from './internal-reducer'\nimport { fromObject, translate, transform, scale } from 'transformation-matrix'\nimport { UniverseCoordinate, ViewportCoordinate } from './types'\nimport { BoundingBox } from '../models'\n\nexport const updatePanning = (\n    state: RootState,\n    viewportX: ViewportCoordinate,\n    viewportY: ViewportCoordinate,\n    limits?: BoundingBox\n) => {\n    const { x: endX, y: endY } = state.drag\n\n    const start = convertViewportCoordsToUniverse(\n        state.transformMatrix,\n        endX || 0,\n        endY || 0\n    )\n    const end = convertViewportCoordsToUniverse(\n        state.transformMatrix,\n        viewportX,\n        viewportY\n    )\n\n    let deltaX = start.x - end.x\n    let deltaY = start.y - end.y\n\n    if (limits) {\n        // If (deltaX < 0), moving towards left\n        //      AND we reached the limit on that side\n        //      AND limit is not reached on the other side\n        //          If hive is zoomed out, and there is space on both sides, we shouldn't block movement in either direction.\n        if (\n            (deltaX < 0 &&\n                deltaX < limits.topLeft.x &&\n                limits.bottomRight.x > 0) ||\n            // If (deltaX > 0), moving towards right, etc ...\n            (deltaX > 0 &&\n                deltaX > limits.bottomRight.x &&\n                limits.topLeft.x < 0)\n        ) {\n            deltaX = 0\n        }\n        if (\n            (deltaY < 0 &&\n                deltaY < limits.topLeft.y &&\n                limits.bottomRight.y > 0) ||\n            (deltaY > 0 &&\n                deltaY > limits.bottomRight.y &&\n                limits.topLeft.y < 0)\n        ) {\n            deltaY = 0\n        }\n    }\n\n    const matrix = transform(\n        fromObject(state.transformMatrix),\n        translate(-deltaX, -deltaY)\n    )\n\n    return {\n        ...state,\n        transformMatrix: matrix,\n    }\n}\n\nexport const zoomToUniversePoint = (\n    state: RootState,\n    universeX: UniverseCoordinate,\n    universeY: UniverseCoordinate,\n    scaleFactor: number\n) => {\n    const matrix = transform(\n        fromObject(state.transformMatrix),\n        translate(universeX, universeY),\n        scale(scaleFactor, scaleFactor),\n        translate(-universeX, -universeY)\n    )\n    return {\n        ...state,\n        transformMatrix: matrix,\n    }\n}\n\nexport const zoomToViewportPoint = (\n    state: RootState,\n    x: ViewportCoordinate,\n    y: ViewportCoordinate,\n    scaleFactor: number\n) => {\n    const { x: universeX, y: universeY } = convertViewportCoordsToUniverse(\n        state.transformMatrix,\n        x,\n        y\n    )\n    return zoomToUniversePoint(state, universeX, universeY, scaleFactor)\n}\n","import React, { useRef } from 'react'\nimport { usePanZoom } from '../../panZoom/hooks'\nimport panZoomStyle from '../../panZoom/style'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    selectZoomedTileId,\n    memoizedSelectTilesInViewBoundingBox,\n    memoizedSelectViewport,\n} from '../../selectors'\nimport HiveZoomer from './HiveZoomer'\nimport { DRAG } from '../../panZoom/internal-reducer/drag'\nimport { WHEEL } from '../../panZoom/internal-reducer/wheel'\nimport { PINCH } from '../../panZoom/internal-reducer/pinch'\nimport {\n    ActionTypes as InternalActionTypes,\n    RootState as InternalPanZoomRootState,\n} from '../../panZoom/internal-reducer'\nimport { updatePanning } from '../../panZoom/transforms'\nimport { zoomToViewportPoint } from '../../panZoom/transforms'\nimport { getScale } from '../../panZoom/utils/math'\nimport { RootState } from '../../store'\nimport { setPanZoomInternal } from '../../store/panZoom'\nimport { useDeviceScaledSettings } from '../../hooks'\n\nconst Hive = () => {\n    const dispatch = useDispatch()\n    const { maxScale, minScale } = useDeviceScaledSettings()\n\n    const currentZoomedTileId = useSelector(selectZoomedTileId)\n    const isZoomedToPage = currentZoomedTileId !== null\n    const tilesBoundingBox = useSelector(memoizedSelectTilesInViewBoundingBox)\n    const viewport = useSelector(memoizedSelectViewport)\n\n    const onStateChange = (\n        newState: InternalPanZoomRootState,\n        previousState: InternalPanZoomRootState\n    ) => {\n        dispatch(setPanZoomInternal(newState, previousState))\n    }\n\n    const internalPanZoomState = useSelector(\n        (state: RootState) => state.panZoom.internal\n    )\n    const reducer = (\n        state: InternalPanZoomRootState,\n        action: InternalActionTypes\n    ) => {\n        if (isZoomedToPage) {\n            return state\n        }\n\n        switch (action.type) {\n            case DRAG:\n                // Compute the limits to avoid going far away from hive when dragging\n                const dragLimits = {\n                    topLeft: {\n                        x: tilesBoundingBox.topLeft.x - viewport.topLeft.x,\n                        y: tilesBoundingBox.topLeft.y - viewport.topLeft.y,\n                    },\n                    bottomRight: {\n                        x:\n                            tilesBoundingBox.bottomRight.x -\n                            viewport.bottomRight.x,\n                        y:\n                            tilesBoundingBox.bottomRight.y -\n                            viewport.bottomRight.y,\n                    },\n                }\n                return updatePanning(\n                    state,\n                    action.payload.x,\n                    action.payload.y,\n                    dragLimits\n                )\n\n            case WHEEL:\n            case PINCH:\n                const newScale =\n                    getScale(state.transformMatrix) * action.payload.scaleFactor\n                if (newScale < minScale || maxScale < newScale) {\n                    return state\n                }\n                return zoomToViewportPoint(\n                    state,\n                    action.payload.x,\n                    action.payload.y,\n                    action.payload.scaleFactor\n                )\n\n            default:\n                return state\n        }\n    }\n\n    const panZoomRef = useRef<HTMLDivElement>(null)\n    const mouseAndTouchHandlers = usePanZoom(\n        panZoomRef,\n        reducer,\n        onStateChange,\n        internalPanZoomState\n    )\n\n    return (\n        <div ref={panZoomRef} {...mouseAndTouchHandlers} style={panZoomStyle}>\n            <HiveZoomer />\n        </div>\n    )\n}\n\nexport default React.memo(Hive)\n","import React, { useEffect } from 'react'\nimport isDeepEqual from 'lodash.isequal'\nimport {\n    getMousePosition,\n    getWheelPositionAndScale,\n    getPinchPoints,\n    isMultiTouch,\n    getTouchPosition,\n} from './utils/events'\n\nimport internalReducer, { RootState, ActionTypes } from './internal-reducer'\nimport {\n    dragStartAction,\n    dragAction,\n    dragEndAction,\n} from './internal-reducer/drag'\nimport {\n    pinchStartAction,\n    pinchAction,\n    pinchEndAction,\n} from './internal-reducer/pinch'\nimport { wheelAction } from './internal-reducer/wheel'\n\nexport const usePanZoom = (\n    panZoomRef: React.RefObject<HTMLElement>,\n    reducer: (state: RootState, action: ActionTypes) => RootState,\n    onStateChange: (newState: RootState, state: RootState) => void,\n    state: RootState,\n    scaleFactorOnWheel: number = 1.06\n) => {\n    let updatedState = { ...state }\n\n    const setState = (newState: RootState) => {\n        if (isDeepEqual(state, newState)) {\n            return\n        }\n        onStateChange(newState, state)\n    }\n\n    useEffect(() => {\n        // Make sure that we stop dragging when mouse is released outside the element\n        const windowMouseUp = (_: MouseEvent) => {\n            setState(internalReducer(updatedState, dragEndAction()))\n        }\n        window.addEventListener('mouseup', windowMouseUp)\n\n        // To disables the bounce effect in ios Safari\n        // ref : https://stackoverflow.com/questions/7768269/ipad-safari-disable-scrolling-and-bounce-effect\n        const disableBounce = (ev: TouchEvent) => ev.preventDefault()\n        let panZoomContainer = panZoomRef.current\n        if (panZoomContainer) {\n            panZoomContainer.addEventListener('touchmove', disableBounce, {\n                passive: false,\n            })\n        }\n\n        return () => {\n            if (panZoomContainer) {\n                panZoomContainer.removeEventListener('touchmove', disableBounce)\n            }\n            window.removeEventListener('mouseup', windowMouseUp)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [state])\n\n    const onMouseDown = (event: React.MouseEvent) => {\n        const { x, y } = getMousePosition(event, panZoomRef.current!)\n        updatedState = internalReducer(updatedState, dragStartAction(x, y))\n        // event.preventDefault()\n        setState(updatedState)\n    }\n\n    const onTouchStart = (event: React.TouchEvent) => {\n        if (isMultiTouch(event)) {\n            const [viewportPoint, initialPinchPointDistance] = getPinchPoints(\n                event,\n                panZoomRef.current!\n            )\n            const scaleFactor = 1\n            updatedState = internalReducer(\n                updatedState,\n                pinchStartAction(initialPinchPointDistance)\n            )\n            updatedState = reducer(\n                updatedState,\n                pinchAction(\n                    viewportPoint.x,\n                    viewportPoint.y,\n                    scaleFactor,\n                    initialPinchPointDistance\n                )\n            )\n            updatedState = internalReducer(\n                updatedState,\n                pinchAction(\n                    viewportPoint.x,\n                    viewportPoint.y,\n                    scaleFactor,\n                    initialPinchPointDistance\n                )\n            )\n        } else {\n            const { x, y } = getTouchPosition(event, panZoomRef.current!)\n            updatedState = internalReducer(updatedState, dragStartAction(x, y))\n        }\n\n        // event.stopPropagation()\n        // event.preventDefault()\n        setState(updatedState)\n    }\n\n    const onMouseMove = (event: React.MouseEvent) => {\n        if (updatedState.drag.dragging) {\n            const { x, y } = getMousePosition(event, panZoomRef.current!)\n            updatedState = reducer(updatedState, dragAction(x, y))\n            updatedState = internalReducer(updatedState, dragAction(x, y))\n            // event.preventDefault();\n            setState(updatedState)\n        }\n    }\n\n    const onTouchMove = (event: React.TouchEvent) => {\n        if (isMultiTouch(event)) {\n            if (updatedState.pinch.pinching) {\n                const [viewportPoint, newPinchPointDistance] = getPinchPoints(\n                    event,\n                    panZoomRef.current!\n                )\n                const scaleFactor =\n                    newPinchPointDistance /\n                    updatedState.pinch.pinchPointDistance!\n                updatedState = reducer(\n                    updatedState,\n                    pinchAction(\n                        viewportPoint.x,\n                        viewportPoint.y,\n                        scaleFactor,\n                        newPinchPointDistance\n                    )\n                )\n                updatedState = internalReducer(\n                    updatedState,\n                    pinchAction(\n                        viewportPoint.x,\n                        viewportPoint.y,\n                        scaleFactor,\n                        newPinchPointDistance\n                    )\n                )\n            }\n        } else {\n            if (updatedState.drag.dragging) {\n                const { x, y } = getTouchPosition(event, panZoomRef.current!)\n                updatedState = reducer(updatedState, dragAction(x, y))\n                updatedState = internalReducer(updatedState, dragAction(x, y))\n            }\n        }\n\n        // event.stopPropagation();\n        // event.preventDefault();\n        setState(updatedState)\n    }\n\n    const onWheel = (event: React.WheelEvent) => {\n        const [viewportPoint, scaleFactor] = getWheelPositionAndScale(\n            scaleFactorOnWheel,\n            event,\n            panZoomRef.current!\n        )\n        updatedState = reducer(\n            updatedState,\n            wheelAction(viewportPoint.x, viewportPoint.y, scaleFactor)\n        )\n        // event.preventDefault();\n        setState(updatedState)\n    }\n\n    const onMouseUp = (event: React.MouseEvent) => {\n        const { x, y } = getMousePosition(event, panZoomRef.current!)\n        updatedState = reducer(updatedState, dragAction(x, y))\n        updatedState = internalReducer(updatedState, dragAction(x, y))\n        updatedState = internalReducer(updatedState, dragEndAction())\n        // event.preventDefault();\n        setState(updatedState)\n    }\n\n    const onTouchEnd = (event: React.TouchEvent) => {\n        if (!isMultiTouch(event)) {\n            if (updatedState.pinch.pinching) {\n                updatedState = internalReducer(updatedState, pinchEndAction())\n            } else if (updatedState.drag.dragging) {\n                const { x, y } = getTouchPosition(event, panZoomRef.current!)\n                updatedState = reducer(updatedState, dragAction(x, y))\n                updatedState = internalReducer(updatedState, dragAction(x, y))\n                updatedState = internalReducer(updatedState, dragEndAction())\n            }\n            // event.stopPropagation()\n            // event.preventDefault()\n        }\n        setState(updatedState)\n    }\n\n    return {\n        onMouseDown,\n        onTouchStart,\n        onMouseMove,\n        onTouchMove,\n        onWheel,\n        onMouseUp,\n        onTouchEnd,\n    }\n}\n","export const WINDOW_DIMENSIONS_SET = 'WINDOW_DIMENSIONS_SET'\n\ninterface RefreshDimensions {\n    type: typeof WINDOW_DIMENSIONS_SET\n    payload: WindowDimensionState\n}\n\nexport type WindowDimensionsTypes = RefreshDimensions\n\nconst getWindowDimensions = () => ({\n    width: window.innerWidth,\n    height: window.innerHeight,\n})\n\nexport const refreshWindowDimensions = (): WindowDimensionsTypes => {\n    return {\n        type: WINDOW_DIMENSIONS_SET,\n        payload: getWindowDimensions(),\n    }\n}\n\nexport interface WindowDimensionState {\n    width: number\n    height: number\n}\n\nconst initialState: WindowDimensionState = getWindowDimensions()\n\nexport function windowDimensionsReducer(\n    state = initialState,\n    action: WindowDimensionsTypes\n): WindowDimensionState {\n    switch (action.type) {\n        case WINDOW_DIMENSIONS_SET:\n            return action.payload\n        default:\n            return state\n    }\n}\n","import React, { useEffect } from 'react'\nimport ReactGA from 'react-ga'\nimport Hive from './Hive/Hive'\nimport { GOOGLE_ANALYTICS_ID } from '../constants'\nimport { useDispatch, useSelector } from 'react-redux'\nimport styled from 'styled-components/macro'\nimport theme from '../theme'\nimport { refreshWindowDimensions } from '../store/windowDimensions'\nimport {\n    selectPanZoomIsInitialized,\n    selectWindowDimensions,\n} from '../selectors'\nimport { setTransform } from '../store/panZoom'\nimport { useDeviceScaledSettings } from '../hooks'\n\nif (process.env.NODE_ENV === 'production') {\n    ReactGA.initialize(GOOGLE_ANALYTICS_ID)\n    ReactGA.pageview(window.location.pathname)\n}\n\nexport const AppContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    ${theme.mixins.scrollbar}\n`\n\nconst App = () => {\n    const dispatch = useDispatch()\n    const isPanZoomInitialized = useSelector(selectPanZoomIsInitialized)\n    const { width, height } = useSelector(selectWindowDimensions)\n    const { initialScale, initialYOffsetRatio } = useDeviceScaledSettings()\n\n    useEffect(() => {\n        const dispatchRefreshWindowDimensions = () =>\n            dispatch(refreshWindowDimensions())\n        window.addEventListener('resize', dispatchRefreshWindowDimensions)\n        return () => {\n            window.removeEventListener(\n                'resize',\n                dispatchRefreshWindowDimensions\n            )\n        }\n    }, [dispatch])\n\n    // Center the hive, the first time we load the page, and we receive width and height.\n    const shouldSetTransform: boolean = !!width && !!height\n    useEffect(() => {\n        dispatch(\n            setTransform(initialScale, width / 2, height * initialYOffsetRatio)\n        )\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [shouldSetTransform])\n\n    return <AppContainer>{isPanZoomInitialized ? <Hive /> : null}</AppContainer>\n}\n\nexport default App\n","import { all, takeEvery } from 'redux-saga/effects'\nimport { setHtmlVideoMuted } from '../utils'\nimport { CLICKED_TILE_SET_SOUND_ON, SetSoundOn } from './clickedTile'\n\nfunction* muteUnmuteVideoTask(action: SetSoundOn) {\n    if (action.payload.previousTileId) {\n        setHtmlVideoMuted(action.payload.previousTileId, true)\n    }\n    if (action.payload.tileId) {\n        setHtmlVideoMuted(action.payload.tileId, false)\n    }\n    yield\n}\n\nfunction* muteUnmuteVideoSaga() {\n    yield takeEvery(CLICKED_TILE_SET_SOUND_ON, muteUnmuteVideoTask)\n}\n\nfunction* rootSaga() {\n    yield all([muteUnmuteVideoSaga()])\n}\n\nexport default rootSaga\n","import { FrontendTile, TileType } from '../models'\nimport preloadedTileData from '../pre-build/tiles.json'\nimport preloadedTileThumbnailData from '../pre-build/tile_thumbnails.json'\nimport { calculatePointFromHexPoint } from '../maths'\nimport { TILE_SIZE, THUMBNAILS_ROOT_URL } from '../constants'\nimport { CONSTANTS, MediaObjectType } from '../pre-build/static'\n\nexport const preloadedTiles = (): TilesState => {\n    const tiles: TilesState = {}\n    preloadedTileData.forEach((t: any) => {\n        const baseTile = {\n            position: calculatePointFromHexPoint(t.hex, TILE_SIZE),\n            ...t,\n        }\n\n        if (t.type === 't') {\n            const tileThumbnail = preloadedTileThumbnailData.filter(\n                (tileThumbnail) => tileThumbnail.id === t.id\n            )[0]\n            if (!tileThumbnail) {\n                throw new Error(`missins tile thumbnail for tile ${t.id}`)\n            }\n\n            // TODO : iOS video not supported, replace with image\n            let thumbnailExtensions: Array<string> = []\n            if (tileThumbnail.type === MediaObjectType.VIDEO) {\n                thumbnailExtensions = CONSTANTS.THUMBNAIL_VIDEO_EXTENSIONS\n            } else if (tileThumbnail.type === MediaObjectType.IMAGE) {\n                thumbnailExtensions = [CONSTANTS.THUMBNAIL_IMAGE_EXTENSION]\n            }\n\n            let thumbnailUrls: Array<string> = thumbnailExtensions.map(\n                (extension) => {\n                    const thumbnailFileName = CONSTANTS.THUMBNAIL_FILENAME_TEMPLATE.replace(\n                        'TILE_ID',\n                        t.id\n                    ).replace('EXTENSION', extension)\n                    return `${THUMBNAILS_ROOT_URL}/${thumbnailFileName}`\n                }\n            )\n\n            tiles[t.id] = {\n                ...baseTile,\n                type: TileType.tile,\n                thumbnailType: tileThumbnail.type,\n                thumbnails: thumbnailUrls,\n            }\n        } else {\n            tiles[t.id] = {\n                ...baseTile,\n                type: TileType.chapter,\n                thumbnails: [],\n            }\n        }\n    })\n    return tiles\n}\n\nexport type TilesState = { [tileId: string]: FrontendTile | undefined }\n\nconst initialState: TilesState = {}\n\nexport function tilesReducer(\n    state = initialState,\n    action: { type: string }\n): TilesState {\n    switch (action.type) {\n        default:\n            return state\n    }\n}\n","export const SVG_TEXT_SIZE_SET = 'SVG_TEXT_SIZE_SET'\n\ninterface SetSize {\n    type: typeof SVG_TEXT_SIZE_SET\n    payload: SvgTextSizeState\n}\n\nexport type SvgTextSizeTypes = SetSize\n\nexport const setSize = (\n    charWidth: number,\n    lineHeight: number\n): SvgTextSizeTypes => {\n    return {\n        type: SVG_TEXT_SIZE_SET,\n        payload: { charWidth, lineHeight },\n    }\n}\n\nexport interface SvgTextSizeState {\n    charWidth: number\n    lineHeight: number\n}\n\nconst initialState: SvgTextSizeState = {\n    charWidth: 0,\n    lineHeight: 0,\n}\n\nexport function svgTextSizeReducer(\n    state = initialState,\n    action: SvgTextSizeTypes\n): SvgTextSizeState {\n    switch (action.type) {\n        case SVG_TEXT_SIZE_SET:\n            return action.payload\n        default:\n            return state\n    }\n}\n","import preloadedMediaObjectData from '../pre-build/media_objects.json'\nimport preloadedServerData from '../pre-build/media_servers.json'\nimport { FrontendMediaObject } from '../models'\n\nexport const preloadedMediaObjects = (): MediaObjectState => {\n    const mediaObjectState: MediaObjectState = {}\n    preloadedMediaObjectData.forEach((m: any) => {\n        const serverUrl = preloadedServerData[m.server_id].url\n        mediaObjectState[m.id] = {\n            id: m.id,\n            mediaType: m.media_type,\n            urls: m.filenames.map(\n                (filename: string) => `${serverUrl}/${filename}`\n            ),\n        }\n    })\n    return mediaObjectState\n}\n\nexport type MediaObjectState = {\n    [mediaObjectId: string]: FrontendMediaObject | undefined\n}\n\nconst initialState: MediaObjectState = {}\n\nexport function mediaObjectsReducer(\n    state = initialState,\n    action: { type: string }\n): MediaObjectState {\n    switch (action.type) {\n        default:\n            return state\n    }\n}\n","import preloadedBibliographyData from '../pre-build/bibliography.json'\nimport { BibliographyEntry } from '../models'\n\nexport const preloadedBibliography = (): BibliographyState => {\n    const bibliography: BibliographyState = {}\n    Object.entries(preloadedBibliographyData).forEach(([key, value]) => {\n        bibliography[key] = { citation: value.f, id: key }\n    })\n    return bibliography\n}\n\nexport type BibliographyState = {\n    [bibliographyKey: string]: BibliographyEntry | undefined\n}\n\nconst initialState: BibliographyState = {}\n\nexport function bibliographyReducer(\n    state = initialState,\n    action: { type: string }\n): BibliographyState {\n    switch (action.type) {\n        default:\n            return state\n    }\n}\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { panZoomReducer } from './panZoom'\nimport rootSaga from './sagas'\nimport { tilesReducer, preloadedTiles } from './tiles'\nimport { svgTextSizeReducer } from './svgTextSize'\nimport { zoomedTileReducer } from './zoomedTile'\nimport { preloadedMediaObjects, mediaObjectsReducer } from './mediaObjects'\nimport { clickedTileReducer } from './clickedTile'\nimport { windowDimensionsReducer } from './windowDimensions'\nimport { preloadedBibliography, bibliographyReducer } from './bibliography'\nimport { referenceViewerReducer } from './referenceViewer'\n\nconst rootReducer = combineReducers({\n    panZoom: panZoomReducer,\n    tiles: tilesReducer,\n    mediaObjects: mediaObjectsReducer,\n    zoomedTile: zoomedTileReducer,\n    clickedTile: clickedTileReducer,\n    svgTextSize: svgTextSizeReducer,\n    windowDimensions: windowDimensionsReducer,\n    bibliography: bibliographyReducer,\n    referenceViewer: referenceViewerReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nconst sagaMiddleware = createSagaMiddleware()\nconst enhancers = [applyMiddleware(sagaMiddleware)]\n\nif (\n    process.env.NODE_ENV === 'development' &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__\n) {\n    enhancers.push((window as any).__REDUX_DEVTOOLS_EXTENSION__())\n}\n\nconst preloadedState = {\n    tiles: preloadedTiles(),\n    mediaObjects: preloadedMediaObjects(),\n    bibliography: preloadedBibliography(),\n}\n\nexport const store = createStore(\n    rootReducer,\n    preloadedState,\n    compose(...enhancers)\n)\n\nsagaMiddleware.run(rootSaga)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React, { useRef, useEffect, useState } from 'react'\nimport round from 'lodash.round'\nimport styled from 'styled-components'\nimport { setSize } from '../store/svgTextSize'\nimport { useDispatch } from 'react-redux'\nimport theme from '../theme'\n\nconst TEXT1 = 'TEST text'\nconst TEXT2 = 'size'\nconst DIMENSIONS = [100, 100]\n\nconst Svg = styled.svg`\n    width: ${DIMENSIONS[0]}px;\n    height: ${DIMENSIONS[1]}px;\n    position: absolute;\n    top: 0;\n    left: 0;\n`\n\nconst TransparentText = styled.text`\n    opacity: 0;\n    font-size: ${theme.fontSizes.basePx}px;\n`\n\nconst SvgTextSizeMeasurement = () => {\n    const textRef = useRef<SVGTextElement>(null)\n    const tspanRef1 = useRef<SVGTSpanElement>(null)\n    const tspanRef2 = useRef<SVGTSpanElement>(null)\n    const dispatch = useDispatch()\n    const [measurementDone, setMeasurementDone] = useState(false)\n\n    useEffect(() => {\n        if (!measurementDone && tspanRef1.current && tspanRef2.current) {\n            const doMeasurements = () => {\n                const textBbox = textRef.current!.getBBox()\n                const tspan1Bbox = tspanRef1.current!.getBBox()\n                const tspan2Bbox = tspanRef2.current!.getBBox()\n                const charWidth = round(textBbox.width / TEXT1.length, 1)\n                const lineHeight = round(\n                    (tspan1Bbox.height + tspan2Bbox.height) / 2,\n                    1\n                )\n                setMeasurementDone(true)\n                dispatch(setSize(charWidth, lineHeight))\n            }\n            doMeasurements()\n\n            // This is to fix dimensions measurements on safari.\n            setTimeout(doMeasurements, 1000)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    // Width measurement on Safari is confusing with the tspans, returned width of tspan is width of whole text element\n    // Therefore, we measure with a separate text element for width\n    return (\n        <Svg viewBox={`0 0 ${DIMENSIONS[0]} ${DIMENSIONS[1]}`}>\n            <TransparentText ref={textRef}>{TEXT1}</TransparentText>\n            <TransparentText>\n                <tspan ref={tspanRef1} x={-100}>\n                    {TEXT1}\n                </tspan>\n                <tspan ref={tspanRef2} x={-100}>\n                    {TEXT2}\n                </tspan>\n            </TransparentText>\n        </Svg>\n    )\n}\n\nexport default React.memo(SvgTextSizeMeasurement)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport { Provider } from 'react-redux'\nimport { store } from './store'\nimport * as serviceWorker from './serviceWorker'\nimport { createGlobalStyle } from 'styled-components'\nimport SvgTextSizeMeasurement from './components/SvgTextSizeMeasurement'\n\nconst GlobalStyle = createGlobalStyle`\n    * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n    }\n\n    button {\n        cursor: pointer;\n    }\n\n    body {\n        background-color: black;\n        overflow: hidden;\n        /* font-family: 'Inconsolata', monospace;\n        font-family: 'Anonymous Pro', monospace;\n        font-family: 'Cutive Mono', monospace; */\n        font-family: 'Fira Code', monospace;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        font-size: 20px;\n    }\n\n    @media screen and (max-width: 1000px) {\n        body {\n            font-size: 15px;\n        }\n    }\n\n    @media screen and (max-width: 600px) {\n        body {\n            font-size: 10px;\n        }\n    }\n\n    html,\n    body,\n    #root {\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n    }\n`\n\nReactDOM.render(\n    <React.StrictMode>\n        <GlobalStyle />\n        <Provider store={store}>\n            <SvgTextSizeMeasurement />\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}